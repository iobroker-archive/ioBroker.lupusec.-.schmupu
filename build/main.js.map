{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\nimport { Lupus } from './lib/lupusec';\nimport { Tools } from './lib/tools';\n\nclass Lupusec extends utils.Adapter {\n    private onlineCheckAvailable: boolean;\n    private onlineCheckTimeout: ReturnType<typeof this.setTimeout>;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'lupusec',\n        });\n        this.onlineCheckAvailable = false;\n        this.onlineCheckTimeout = undefined;\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.changeDefaultParamter();\n        await this.subscribeStatesAsync('devices.*');\n        await this.subscribeStatesAsync('status.*');\n        await this.subscribeStatesAsync('sms.*');\n        await this.subscribeStatesAsync('webcams.*');\n        await this.subscribeObjectsAsync('devices.*');\n        await this.subscribeObjectsAsync('status.*');\n        await this.subscribeObjectsAsync('sms.*');\n        await this.subscribeObjectsAsync('webcams.*');\n        await this.startOnlineCheck();\n        this.log.info(`GitHub version!`);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback calback function\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.log.info(`Stopping Lupusec processes, please wait!`);\n            this.stopOnlineCheck();\n            await this.stopLupusecAdapter();\n            await Tools.wait(15);\n            callback();\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (error) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed object changes\n     *\n     * @param id id of the object\n     * @param obj object\n     */\n    private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        const lupusec = await Lupus.getInstance(this);\n        await lupusec.onObjectChange(id, obj);\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id id of state\n     * @param state state\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        const lupusec = await Lupus.getInstance(this);\n        if (state) {\n            await lupusec.onStateChange(id, state);\n        }\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     *\n     * @param obj object\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            if (obj.command === 'send') {\n                // e.g. send email or pushover or whatever\n                this.log.info('send command');\n\n                // Send response in callback if required\n                if (obj.callback) {\n                    this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n                }\n            }\n            if (obj.command === 'sendDoor') {\n                const array = [];\n                const actualstates = await this.getStatesAsync(`${this.namespace}.devices.*`);\n                for (const [key] of Object.entries(actualstates)) {\n                    if (key.endsWith('type') && actualstates[key].val === 4) {\n                        const name = actualstates[key.replace(/type$/, 'name')].val || 'Door';\n                        const channel = key.split('.').slice(3, 4).join('.'); // Device ID - ZS:a61d01\n                        array.push({ label: `${name} (${channel})`, value: channel });\n                    }\n                }\n                // Send response in callback if required\n                if (obj.callback) {\n                    this.sendTo(obj.from, obj.command, array, obj.callback);\n                }\n            }\n            if (obj.command === 'sendNuki') {\n                const array = [];\n                const actualstates = await this.getStatesAsync(`${this.namespace}.devices.*`);\n                for (const [key] of Object.entries(actualstates)) {\n                    if (key.endsWith('type') && actualstates[key].val === 57) {\n                        const name = actualstates[key.replace(/type$/, 'name')].val || 'Nuki';\n                        const channel = key.split('.').slice(3, 4).join('.'); // Device ID - ZS:a61d01\n                        array.push({ label: `${name} (${channel})`, value: channel });\n                    }\n                }\n                // Send response in callback if required\n                if (obj.callback) {\n                    this.sendTo(obj.from, obj.command, array, obj.callback);\n                }\n            }\n            if (obj.command === 'sms' || obj.command === 'smsgw') {\n                const lupusec = await Lupus.getInstance(this);\n                const valText = obj?.message.text;\n                const valNumber = obj?.message.number;\n                const iddevice = 'sms.dial';\n                if (obj.command === 'sms' && valText && valNumber) {\n                    const form = {\n                        phone: valNumber,\n                        smstext: valText,\n                    };\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const result = await lupusec.sendSMSPost(iddevice, form);\n                    this.sendTo(obj.from, obj.command, obj.message, obj.callback);\n                }\n                if (obj.command === 'smsgw' && valText && valNumber) {\n                    const form = {\n                        to: valNumber,\n                        message: valText,\n                    };\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const result = await lupusec.sendSMSgwTestPost(iddevice, form);\n                    this.sendTo(obj.from, obj.command, obj.message, obj.callback);\n                }\n            }\n        }\n    }\n\n    /**\n     * Change default parameter\n     */\n    async changeDefaultParamter(): Promise<void> {\n        let update = false;\n        const id = `system.adapter.${this.namespace}`;\n        const obj = await this.getForeignObjectAsync(id);\n        if (obj && obj.native) {\n            if (obj.native.option_pollfaster === true) {\n                /*\n                this.log.debug(`Changing default parameter ${id} from value ${obj.native.option_pollfaster} to false`);\n                obj.native.option_pollfaster = false;\n                update = true;\n                */\n            }\n            const server = this.getHostnameAndPort();\n            const url = server.https\n                ? `https://${server.hostname}:${server.port}`\n                : `http://${server.hostname}:${server.port}`;\n            if (obj.native.alarmlink !== url) {\n                this.log.debug(`Changing Local Link parameter ${id} to  ${obj.native.alarmlink}`);\n                obj.native.alarmlink = url;\n                update = true;\n            }\n            if (update && obj) {\n                this.log.info(`Changing global Lupusec Adapter parmater. Adapter is restarting now.`);\n                await this.setForeignObjectAsync(id, obj);\n            }\n        }\n    }\n\n    /**\n     * returns the hostname and port of configuration.\n     * example. test.foo:80 => {hostanem: test.foo, port: 80}\n     *\n     * @returns hostname and port as object\n     */\n    getHostnameAndPort(): any {\n        const alarm_hostname = this.config.alarm_hostname; // await tools.lookup(this.config.alarm_hostname);\n        const array = alarm_hostname.split(':');\n        const hostname = array[0];\n        const port = array[1] ? array[1] : this.config.alarm_https === true ? 443 : 80;\n        return { hostname: hostname, port: port, https: this.config.alarm_https };\n    }\n\n    /**\n     * checks if alam system is reachable\n     *\n     * @returns true or false\n     */\n    async isAlarmSystemReachable(): Promise<boolean> {\n        const server = this.getHostnameAndPort();\n        const isAlive = await Tools.probe(server.hostname, server.port);\n        return isAlive;\n    }\n\n    /**\n     * Online-Check via TCP ping (when using CoAP)\n     */\n    async startOnlineCheck(): Promise<void> {\n        try {\n            const server = this.getHostnameAndPort();\n            const isAlive = await this.isAlarmSystemReachable();\n            if (isAlive === true) {\n                this.onlineCheckAvailable === false\n                    ? this.log.info(`Could reach alarm system with hostname ${server.hostname} on port ${server.port}.`)\n                    : this.log.debug(\n                          `Could reach alarm system with hostname ${server.hostname} on port ${server.port}.`,\n                      );\n                await this.startLupuscecAdapter();\n            } else {\n                this.log.error(\n                    `Could not reach alarm system with hostname  ${server.hostname} on port ${server.port}.`,\n                );\n                await this.stopLupusecAdapter();\n            }\n            this.onlineCheckAvailable = isAlive;\n        } catch (error: any) {\n            this.log.error(`Error in periodical online check (${error.toString()})`);\n        }\n        this.onlineCheckTimeout = this.setTimeout(async () => await this.startOnlineCheck(), 10 * 1000);\n    }\n\n    /**\n     * Stops the continously online check\n     */\n    stopOnlineCheck(): void {\n        if (this.onlineCheckTimeout) {\n            this.clearTimeout(this.onlineCheckTimeout);\n            this.onlineCheckTimeout = undefined;\n        }\n    }\n\n    /**\n     * Starts the polling of the states from the Lupusec alarm system.\n     */\n    async startLupuscecAdapter(): Promise<void> {\n        const lupusec = await Lupus.getInstance(this);\n        await lupusec.startallproc();\n        await this.setStateAsync('info.connection', { val: true, ack: true });\n    }\n\n    /**\n     * Stops polling the states from the Lupusec alarm system\n     */\n    async stopLupusecAdapter(): Promise<void> {\n        const lupusec = await Lupus.getInstance(this);\n        lupusec.stopallproc();\n        await this.setStateAsync('info.connection', { val: false, ack: true });\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Lupusec(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Lupusec())();\n}\n"],
  "mappings": "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",
  "names": []
}
