{
  "version": 3,
  "sources": ["../../src/lib/webcam.ts"],
  "sourcesContent": ["import axios from 'axios';\nimport * as http from 'http';\nimport { createHttpTerminator } from 'http-terminator';\nimport * as https from 'https';\nimport { Tools } from './tools';\n\n/**\n * Class MJPEG to JPG\n */\nexport class MJPEGtoJPG {\n    private adapter: any;\n    private chunks: any[];\n\n    /**\n     *\n     * @param adapter iobroker Adapter\n     */\n    constructor(adapter: any) {\n        this.adapter = adapter;\n        this.chunks = [];\n    }\n\n    /**\n     *\n     * @param data data\n     * @param callback callback function\n     */\n    public mjpegTojpeg(data: any, callback?: (value: any) => void): void {\n        const soi = Buffer.from([0xff, 0xd8]);\n        const eoi = Buffer.from([0xff, 0xd9]);\n        if (this.chunks.length === 0) {\n            const startIndex = data.indexOf(soi);\n            const slicedData = data.slice(startIndex, data.length);\n            this.chunks.push(slicedData);\n        } else if (data.indexOf(eoi) != -1) {\n            const endIndex = data.indexOf(eoi) + 2;\n            const slicedData = data.slice(0, endIndex);\n            this.chunks.push(slicedData);\n            const img = Buffer.concat(this.chunks);\n            callback && callback(img);\n            this.chunks = [];\n            this.mjpegTojpeg(data);\n        } else {\n            this.chunks.push(data);\n        }\n    }\n\n    /**\n     * clear all\n     */\n    public clearAll(): void {\n        this.chunks = [];\n    }\n}\n\n/**\n * Class Webcam\n */\nexport class Webcam {\n    private adapter: any;\n    private webcams: any;\n    private host: string;\n    private port: number;\n    private static instance: Webcam;\n    private httpTerminator: any; // HttpTerminator;\n\n    /**\n     * Constructur webcam instance\n     *\n     * @param adapter iobroker adapter\n     * @param webcams object with webcam from Lupusec system\n     */\n    private constructor(adapter: any, webcams: any) {\n        this.adapter = adapter;\n        this.webcams = webcams;\n        this.host = this.adapter.config.webcam_bind;\n        this.port = this.adapter.config.webcam_port;\n        this.httpTerminator = undefined;\n    }\n\n    /**\n     * Singelton, create webcam instance\n     *\n     * @param adapter iobroker adapter\n     * @param webcams object with webcam from Lupusec system\n     * @returns returns webcam instance\n     */\n    static getInstance(adapter: any, webcams: any): Webcam {\n        if (!this.instance) {\n            this.instance = new Webcam(adapter, webcams);\n        }\n        return this.instance;\n    }\n\n    /**\n     * Gets from path the abssolute Url\n     *\n     * @param path path of the Url like /action/logout\n     * @returns full abaolute URI like https://foo.com/action/logout\n     */\n    private async getAbsoluteURI(path: string): Promise<string> {\n        const alarm_hostname = await Tools.lookup(this.adapter.config.alarm_hostname);\n        const aboluteURI =\n            this.adapter.config.alarm_https === true\n                ? `https://${alarm_hostname}${path}`\n                : `http://${alarm_hostname}${path}`;\n        return aboluteURI;\n    }\n\n    /**\n     * Start Server\n     *\n     * @returns no return value\n     */\n    public async startServer(): Promise<void> {\n        const host = this.host;\n        const port = this.port;\n        if (port > 0 && host) {\n            try {\n                const bind = host ? `${host}:${port}` : port;\n                const running = await Tools.probe(host, port);\n                if (running) {\n                    this.adapter.log.debug(`Webcam Listining Service on ${bind} running`);\n                    return;\n                }\n                this.adapter.log.debug(`Starting Webcam Listining Service on ${bind}`);\n                const server = http.createServer();\n                this.httpTerminator = createHttpTerminator({\n                    server,\n                });\n                server.on('error', error => {\n                    this.adapter.log.error(`Error listining Webcam on port ${bind} (${error})`);\n                });\n                server.on('request', async (req, res) => {\n                    let controller: any;\n                    if (res && res.socket && req && req.url) {\n                        // if webcam request not running, start now\n                        const reqid = req.url.replace(/^(\\/image\\/|\\/stream\\/)/g, '');\n                        if (req.url.startsWith('/image/')) {\n                            controller = await this.startStreamingClient(reqid, this.webcams[reqid].url, 'image', res);\n                        } else if (req.url.startsWith('/stream/')) {\n                            controller = await this.startStreamingClient(reqid, this.webcams[reqid].url, 'stream', res);\n                        } else {\n                            res.end();\n                        }\n                        res.socket.on('close', () => {\n                            if (controller) {\n                                controller.abort();\n                            }\n                        });\n                    }\n                });\n                server.on('close', () => {\n                    this.adapter.log.debug(`Stopping Webcam Listining Service on ${bind}`);\n                });\n                server.listen(port, host);\n            } catch (error: any) {\n                this.adapter.log.error(`Error: ${error.toString()}`);\n            }\n        }\n    }\n\n    /**\n     * Stop Server\n     */\n    private stoptServer(): void {\n        if (this.httpTerminator) {\n            this.httpTerminator.terminate();\n            delete this.httpTerminator;\n        }\n    }\n\n    /**\n     *\n     * @param id id of webcam\n     * @param url url of wwebam\n     * @param type type\n     * @param res res\n     * @returns controller\n     */\n    public async startStreamingClient(\n        id: string,\n        url: string,\n        type: string,\n        res: any,\n    ): Promise<AbortController | void> {\n        if (!id || !url) {\n            return;\n        }\n        const uniqueid = Date.now().toString(36);\n        const converter = new MJPEGtoJPG(this.adapter);\n        const controller = new AbortController();\n        const myURL = new URL(url);\n        const path = myURL.pathname.slice(1) + (myURL.search.length > 0 ? `&${myURL.search.slice(1)}` : '');\n        const camnr = id.slice(-1);\n        const urlPasthru = '/action/passthru';\n        const uri = await this.getAbsoluteURI(`${urlPasthru}?cam=${camnr}&cmd=${path}`);\n        const auth = `Basic ${Buffer.from(\n            `${this.adapter.config.alarm_user}:${this.adapter.config.alarm_password}`,\n        ).toString('base64')}`;\n        const agent = new https.Agent({\n            rejectUnauthorized: false,\n        });\n        try {\n            const response = await axios.get(uri, {\n                httpsAgent: agent,\n                headers: {\n                    Authorization: auth,\n                },\n                responseType: 'stream',\n                signal: controller.signal,\n            });\n            let contenttype = response.headers['content-type'];\n            const stream = response?.data;\n            if (stream) {\n                this.adapter.log.debug(`Starting Webcam Client  ${id} with unique id (${uniqueid})`);\n            }\n            stream.on('data', (data: any) => {\n                switch (type) {\n                    case 'image':\n                        res.setHeader('Content-type', 'image/jpeg');\n                        converter.mjpegTojpeg(data, img => {\n                            // fs.writeFileSync(`/Users/thorsten.stueben/Downloads/${id}.jpg`, img);\n                            res.end(img);\n                            controller.abort();\n                        });\n                        break;\n                    case 'stream':\n                        if (contenttype) {\n                            res.setHeader('Content-type', contenttype);\n                            contenttype = '';\n                        }\n                        res.write(data, 'binary');\n                        break;\n                    default:\n                        controller.abort();\n                        break;\n                }\n            });\n            stream.on('end', () => {\n                converter.clearAll();\n                this.adapter.log.debug(`Stopping Webcam Client  ${id} with unique id (${uniqueid})`);\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            stream.on('error', (error: any) => {\n                converter.clearAll();\n                this.adapter.log.debug(`Error, stopping Webcam Client  ${id} with unique id (${uniqueid})`);\n            });\n        } catch (error: any) {\n            converter.clearAll();\n            this.adapter.log.error(`Error: ${error.toString()}`);\n        }\n        return controller;\n    }\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
