{
  "version": 3,
  "sources": ["../../src/lib/states.ts"],
  "sourcesContent": ["import { Tools } from './tools';\n\nexport interface ifState {\n    val: any;\n    ack: boolean;\n}\n\nexport interface ifStates {\n    [index: string]: ifState;\n}\n\nexport interface ifObjects {\n    [index: string]: any;\n}\n\n/**\n * Verwaltung von States\n */\nexport class States {\n    adapter: any;\n    states: ifStates;\n    language: string;\n    objects: ifObjects;\n    abort: number;\n    saveobjects: boolean;\n    savestates: boolean;\n\n    /**\n     *\n     * @param adapter ioBroker Adapter\n     * @param language Language like de, en\n     * @param save state an objects changes saved in internal table\n     */\n    constructor(adapter: any, language?: string, save: boolean = false) {\n        this.adapter = adapter;\n        this.language = language || 'en';\n        this.states = {};\n        this.objects = {};\n        this.saveobjects = save;\n        this.savestates = save;\n        this.abort = (adapter.config.alarm_polltime * 1000) / 2;\n    }\n\n    /**\n     * Reads all states for adapter from ioBroker\n     */\n    public async initStatesAllAsync(): Promise<void> {\n        this.states = {};\n        const states = await this.adapter.getStatesAsync(`${this.adapter.namespace}.*`);\n        for (const id in states) {\n            const idnew = id.replace(`${this.adapter.namespace}.`, '');\n            const val = Tools.hasProperty(states[id], 'val') ? states[id].val : null;\n            const ack = Tools.hasProperty(states[id], 'ack') ? states[id].ack : false;\n            delete states[id];\n            states[idnew] = {\n                val: val,\n                ack: ack,\n            };\n            if (this.savestates) this.states[idnew] = states[idnew];\n        }\n    }\n\n    /**\n     * Get State by id\n     * @param id id of state\n     * @returns returns value und ack from state\n     */\n    public async getStateAsync(id: string): Promise<ifState | undefined> {\n        if (id) {\n            id = id.replace(`${this.adapter.namespace}.`, '');\n            if (this.savestates) {\n                return this.states[id] ? this.states[id] : undefined;\n            } else {\n                const state = await this.adapter.getStateAsync(id);\n                return state ? ({ val: state.val, ack: state.ack } as ifState) : undefined;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     *\n     * @param pattern like devices.*.type. If empty pattern = *\n     * @returns all states for pattern\n     */\n    public async getStatesAllAsync(pattern?: string): Promise<ifStates> {\n        if (!this.states) {\n            return this.states;\n        } else {\n            if (!pattern) pattern = '*';\n            const states = await this.adapter.getStatesAsync(`${this.adapter.namespace}.${pattern}`);\n            for (const id in states) {\n                const idnew = id.replace(`${this.adapter.namespace}.`, '');\n                const val = Tools.hasProperty(states[id], 'val') ? states[id].val : null;\n                const ack = Tools.hasProperty(states[id], 'ack') ? states[id].ack : false;\n                delete states[id];\n                states[idnew] = {\n                    val: val,\n                    ack: ack,\n                };\n            }\n            return states;\n        }\n    }\n\n    /**\n     * Set State by id, only if state changed (ack or val)\n     * @param id id to state\n     * @param object object with keys val and ack { val: 'value', ack: true/false }\n     * @returns if state changed, you get back the id else undefined\n     */\n    public async setStateNotExistsAsync(id: string, object: any): Promise<any> {\n        if (id) id = id.replace(`${this.adapter.namespace}.`, '');\n        if (object) {\n            const stateold = await this.getStateAsync(id);\n            if (!stateold || stateold.val !== object.val || stateold.ack !== object.ack) {\n                return await this.setStateAsync(id, object);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Set State by id\n     * @param id id to state\n     * @param object object with keys val and ack { val: 'value', ack: true/false }\n     * @returns if state changed, you get back the id, else undefined\n     */\n    public async setStateAsync(id: string, object: any): Promise<any> {\n        if (id) {\n            const val = Tools.hasProperty(object, 'val') ? object.val : null;\n            const ack = Tools.hasProperty(object, 'ack') ? object.ack : false;\n            id = id.replace(`${this.adapter.namespace}.`, '');\n            if (this.savestates) this.states[id] = { val: val, ack: ack };\n            return await this.adapter.setStateAsync(id, { val: val, ack: ack });\n        }\n        return undefined;\n    }\n\n    /**\n     * Delete a state by id\n     * @param id id to state\n     * @returns if state deleted, you get back true else false\n     */\n    public async delStateAsync(id: string): Promise<void> {\n        if (id) id = id.replace(`${this.adapter.namespace}.`, '');\n        if (this.states[id]) {\n            delete this.states[id];\n        }\n        const state = await this.adapter.getStateAsync(id);\n        if (state) {\n            await this.adapter.delStateAsync(id);\n        }\n    }\n\n    /**\n     * Reads all objects for an adapter\n     * @returns returns all objects\n     */\n    public async initObjectsAllAsync(): Promise<ifObjects> {\n        this.objects = {};\n        const objects = await this.adapter.getAdapterObjectsAsync();\n        for (const id in objects) {\n            const val = objects[id];\n            const idnew = id.replace(`${this.adapter.namespace}.`, '');\n            delete objects[id];\n            objects[idnew] = val;\n            if (this.saveobjects) this.objects[idnew] = objects[idnew];\n        }\n        return objects;\n    }\n\n    /**\n     * Get State by id\n     * @param id id to state\n     * @returns returns value und ack from state\n     */\n    public async getObjectAsync(id: string): Promise<any> {\n        if (id) {\n            id = id.replace(`${this.adapter.namespace}.`, '');\n            if (this.saveobjects) {\n                return this.objects[id] ? this.objects[id] : {};\n            } else {\n                const object = await this.adapter.getObjectAsync(id);\n                return object ? object : {};\n            }\n        }\n        return {};\n    }\n\n    /**\n     * reads all objects\n     * @returns {Promise<object>} : return all objects\n     */\n    public async getObjectsAllAsync(): Promise<ifObjects> {\n        if (this.objects) {\n            return this.objects;\n        } else {\n            const objects = await this.adapter.getAdapterObjectsAsync();\n            for (const id in objects) {\n                const object = objects[id];\n                const idnew = id.replace(`${this.adapter.namespace}.`, '');\n                delete objects[id];\n                objects[idnew] = object;\n            }\n            return objects;\n        }\n    }\n\n    /**\n     * Sets for an id the object data\n     * @param id state id\n     * @param parameter like name\n     * @param options (optional)\n     * @returns returns id if changed, else undefined\n     */\n    public async setObjectNotExistsAsync(id: string, object: any, options?: object): Promise<any> {\n        if (id) id = id.replace(`${this.adapter.namespace}.`, '');\n        if (object?.common?.name || object?.common?.states) {\n            const objectold = await this.getObjectAsync(id);\n            if (\n                !objectold ||\n                !Tools.hasProperty(objectold, 'common') ||\n                !Tools.hasProperty(objectold.common, 'name') ||\n                !Tools.isEqual(objectold.common.name, object.common.name) ||\n                !Tools.isEqual(objectold.common.states, object.common.states) ||\n                !Tools.isEqual(objectold.common.statusStates, object.common.statusStates)\n            ) {\n                return await this.setObjectAsync(id, object, options);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     *\n     * @param id id of object\n     * @param object object payload\n     * @param options option (optional)\n     * @returns\n     */\n    public async setObjectAsync(id: string, object: any, options?: object): Promise<any> {\n        if (id) {\n            id = id.replace(`${this.adapter.namespace}.`, '');\n            if (this.saveobjects) this.objects[id] = object;\n            return await this.adapter.setObjectAsync(id, object, options);\n        }\n        return undefined;\n    }\n\n    /**\n     *\n     * @param id id of object\n     */\n    public async delObjectAsync(id: string): Promise<void> {\n        if (id) id = id.replace(`${this.adapter.namespace}.`, '');\n        if (this.objects[id]) {\n            delete this.states[id];\n        }\n        const object = await this.adapter.getObjectAsync(id);\n        if (object) {\n            await this.adapter.delObjectAsync(id);\n        }\n        await this.delStateAsync(id);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
