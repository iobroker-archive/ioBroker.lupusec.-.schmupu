{
  "version": 3,
  "sources": ["../../src/lib/lupusec.ts"],
  "sourcesContent": ["import axios from 'axios';\nimport http from 'http';\nimport https from 'https';\nimport querystring from 'querystring';\nimport { Datapoints } from './datapoints';\nimport type * as states from './states';\nimport { States } from './states';\nimport { Tools } from './tools';\nimport { Webcam } from './webcam';\n\nconst urlTokenGet = '/action/tokenGet';\nconst urlLogoutPost = '/action/logout';\nconst urlDeviceListGet = '/action/deviceListGet';\nconst urlDevicePSSListGet = '/action/deviceListPSSGet';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst urlDeviceGet = '/action/deviceGet';\nconst urlPanelCondGet = '/action/panelCondGet';\nconst urlPanelCondPost = '/action/panelCondPost';\nconst urlDeviceSwitchPSSPost = '/action/deviceSwitchPSSPost';\nconst urlHaExecutePost = '/action/haExecutePost';\nconst urlDeviceEditGet = '/action/deviceEditGet';\nconst urlDeviceEditPost = '/action/deviceEditPost';\nconst urlDeviceSwitchDimmerPost = '/action/deviceSwitchDimmerPost';\nconst urlDeviceHueColorControl = '/action/deviceHueColorControl';\nconst urlDeviceEditThermoPost = '/action/deviceEditThermoPost';\nconst urlDeviceEditThermoGet = '/action/deviceEditThermoGet';\nconst urlDeviceEditShutterPost = '/action/deviceEditShutterPost';\nconst urlDeviceEditShutterGet = '/action/deviceEditShutterGet';\nconst urlDeviceEditMeterGet = '/action/deviceEditMeterGet';\nconst urlDeviceEditMeterPost = '/action/deviceEditMeterPost';\nconst urlDeviceNukiCmd = '/action/nukiCmd';\nconst urlIpcamGet = '/action/ipcamGet';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst urlPasthru = '/action/passthru';\nconst urlDeviceListUPICGet = '/action/deviceListUPICGet';\nconst urlDeviceDoUPICPost = '/action/deviceDoUPICPost';\nconst urlSendSMSPost = '/action/sendSMSPost';\nconst urlSmsgwTestPost = '/action/smsgwTestPost';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst urlSystemGet = '/action/systemGet';\nconst urlLogsGet = '/action/logsGet';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst urlrecordListGet = '/action/recordListGet';\nconst urlNukiGet = '/action/nukiGet';\n\ninterface ifDeviceId {\n    id: string;\n    type: number;\n}\n\n/**\n * Lupsec Class (alarmsystem)\n */\nexport class Lupus {\n    private adapter: any;\n    private unixtime: { [index: string]: number };\n    private run: { [index: string]: ioBroker.Timeout };\n    private language: string;\n    private states: States;\n    private timerhandle: { [index: string]: ioBroker.Timeout | undefined };\n    private static instance: Lupus;\n    private static uniqueid: number;\n    private cpu: any;\n    private auth: string;\n    private token: string;\n    private axiostimeout: number;\n    private axiosinstance: axios.AxiosInstance;\n    private readonly httpsagent = new https.Agent({\n        rejectUnauthorized: false,\n        keepAlive: true,\n        maxSockets: 1,\n    });\n    private readonly httpagent = new http.Agent({\n        keepAlive: true,\n        maxSockets: 1,\n    });\n\n    /**\n     * Contructor - Use insteed singelton method getInstance\n     *\n     * @param adapter ioBroker adapter instance\n     * @param language language for state names (de, en, ..)\n     */\n    private constructor(adapter: any, language?: string) {\n        this.adapter = adapter;\n        this.unixtime = {};\n        this.run = {};\n        this.language = language || 'en';\n        this.states = new States(adapter, language, false);\n        this.timerhandle = {};\n        this.auth = `Basic ${Buffer.from(\n            `${this.adapter.config.alarm_user}:${this.adapter.config.alarm_password}`,\n        ).toString('base64')}`;\n        this.token = '';\n        this.axiostimeout = 15 * 1000; // this.adapter.config.alarm_polltime * 1000\n        this.axiosinstance = axios.create();\n        this.adapter.log.debug(`New instance of Lupusec created!`);\n    }\n\n    /**\n     * Singelton - get Lupusec class instance\n     *\n     * @param adapter ioBroker adapter instance\n     * @returns Instane of Lupusec class\n     */\n    public static async getInstance(adapter: any): Promise<Lupus> {\n        if (!this.instance) {\n            const obj = await adapter.getForeignObjectAsync('system.config');\n            const language = (obj?.common?.language || 'en').toLowerCase();\n            this.uniqueid = Tools.getUnixTimestampNow();\n            this.instance = new Lupus(adapter, language);\n            await this.instance.states.initObjectsAllAsync();\n            await this.instance.states.initStatesAllAsync();\n        }\n        return this.instance;\n    }\n\n    /**\n     * unique identifier\n     *\n     * @returns unique identifier\n     */\n    private static getUniqueId(): number {\n        return this.uniqueid;\n    }\n\n    /**\n     * starting a prozess every x seconds\n     *\n     * @param id unique name  / key of the process\n     * @param seconds process restarting after x seconds\n     * @param callback function to start (function can be async)\n     */\n    private async startproc(id: string, seconds: number, callback: () => void): Promise<void> {\n        if (callback !== undefined) {\n            try {\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                this.adapter.log.debug(`Starting polling with process ${id}, callback ${callback}`);\n                // eslint-disable-next-line @typescript-eslint/await-thenable\n                Tools.isAsync(callback) ? await callback() : callback();\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                this.adapter.log.debug(`Stoping polling with process ${id}, callback ${callback} `);\n            } catch (error: any) {\n                const message = error?.response?.data || error.toString() || 'not known';\n                this.adapter.log.error(`Error: ${message} for process ${id}`);\n                if (error?.stack) {\n                    this.adapter.log.debug(`Error: ${error.stack.toString()} for process ${id}`);\n                }\n            }\n        }\n        if (this.run[id]) {\n            this.adapter.clearTimeout(this.run[id]);\n        }\n        this.run[id] = this.adapter.setTimeout(async () => await this.startproc(id, seconds, callback), seconds * 1000);\n    }\n\n    /**\n     * stopping process by id\n     *\n     * @param id unique name  / key of the process\n     */\n    private stopproc(id: string): void {\n        if (this.run[id]) {\n            this.adapter.log.debug(`Canceling process with id ${id}`);\n            this.adapter.clearTimeout(this.run[id]);\n            delete this.run[id];\n        }\n    }\n\n    /**\n     * does process with id exist\n     *\n     * @param id unique name  / key of the process\n     * @returns exist true/false\n     */\n    private exsitproc(id: string): boolean {\n        return this.run[id] ? true : false;\n    }\n\n    /**\n     * set process with value\n     *\n     * @param id unique name  / key of the process\n     * @param val value is timmer of setTimeout\n     */\n    private setproc(id: string, val: ioBroker.Timeout): void {\n        this.run[id] = val;\n    }\n\n    /**\n     * List of all processes to start\n     */\n    public async startallproc(): Promise<void> {\n        this.adapter.log.debug(`Starting Lupsuec polling process`);\n        const seconds = this.adapter.config.alarm_polltime;\n        if (!this.exsitproc('Init')) {\n            await this.initObjects();\n            await this.requestToken(true);\n            this.setproc('Init', 1 as ioBroker.Timeout);\n        }\n        if (!this.exsitproc('Status')) {\n            await this.startproc('Status', seconds > 1 ? seconds : 1, async () => {\n                await this.getAllStatusLupusecEntries();\n            });\n        }\n        if (!this.exsitproc('Devices')) {\n            await this.startproc('Devices', seconds > 1 ? seconds : 1, async () => {\n                await this.getAllDeviceLupusec();\n            });\n        }\n        if (this.adapter.config.webcam_providing && !this.exsitproc('Webcamsms')) {\n            await this.startproc('Webcamsms', seconds > 10 ? seconds : 10, async () => {\n                await this.getAllWebcamLupusecEntries();\n                await this.getAllSMSLupusecEntries();\n            });\n        }\n        const id = `system.adapter.${this.adapter.namespace}.logLevel`;\n        const stateLogLevel = (await this.adapter.getForeignStateAsync(id))?.val;\n        if (!this.exsitproc('DebugInfos') && stateLogLevel === 'debug') {\n            await this.startproc('DebugInfos', 15, async () => {\n                await this.debugInfos();\n            });\n        }\n        if (this.exsitproc('DebugInfos') && stateLogLevel !== 'debug') {\n            this.stopproc('DebugInfos');\n        }\n    }\n\n    /**\n     * Some debug Infos\n     */\n    private async debugInfos(): Promise<void> {\n        this.adapter.log.debug(`Array Unixtime: ${Object.keys(this.unixtime).length}`);\n        this.adapter.log.debug(`Array Run: ${Object.keys(this.run).length}`);\n        this.adapter.log.debug(`Array Timerhandle: ${Object.keys(this.timerhandle).length}`);\n        this.adapter.log.debug(`Array internal States: ${Object.keys(await this.states.getStatesAllAsync()).length}`);\n        this.adapter.log.debug(`Array internal Objects: ${Object.keys(await this.states.getObjectsAllAsync()).length}`);\n        this.adapter.log.debug(`Unique Id: ${Lupus.getUniqueId()}`);\n        const memory = process.memoryUsage() as any;\n        this.cpu = process.cpuUsage(this.cpu);\n        // this.adapter.log.info(`Process Meomory: ${Tools.delSonderzeichen(util.inspect(memory))}`);\n        for (const i in memory) {\n            memory[i] = `${(((Math.round(memory[i]) / 1024 / 1024) * 100) / 100).toLocaleString(this.language)} MB`;\n        }\n        if (this.cpu) {\n            memory.cpuUser = this.cpu.user.toLocaleString(this.language);\n            memory.cpuSystem = this.cpu.system.toLocaleString(this.language);\n        }\n        this.adapter.log.debug(`Process Meomory: ${JSON.stringify(memory)}`);\n    }\n\n    private async dummyProcess(): Promise<void> {\n        await Tools.wait(4);\n    }\n\n    /**\n     * stop all process\n     */\n    public stopallproc(): void {\n        for (const id in this.run) {\n            this.stopproc(id);\n        }\n    }\n\n    /**\n     * set actual time as unix time for an unique id\n     *\n     * @param id unique name  / key of the process\n     * @param unixtimestamp unixtime to set (optional)\n     */\n    private setUnixTimestamp(id: string, unixtimestamp?: number): void {\n        if (unixtimestamp === undefined) {\n            this.unixtime[id] = this.getUnixTimestampNow();\n        } else {\n            this.unixtime[id] = unixtimestamp;\n        }\n    }\n\n    /**\n     * gets acutal time\n     */\n    private getUnixTimestampNow(): number {\n        // return Math.round(new Date().getTime());\n        return Math.ceil(new Date().getTime());\n    }\n\n    /**\n     * gets unixtime for id\n     *\n     * @param id unique name  / key of the process\n     * @returns unixtime\n     */\n    private getUnixTimestamp(id: string): number {\n        return this.unixtime[id];\n    }\n\n    /**\n     * deletes unixtime f\u00FCr id\n     *\n     * @param id {string}\n     */\n    private delUnixTimestamp(id: string): void {\n        this.unixtime[id] = 0;\n    }\n\n    /**\n     * Get all device ids for a devicetype. Example for devicetype 42 you get back [{ id: 'Z:34324, type:42 }, { id: 'Z:4721', type: 42}]\n     * If you set devicetype to undefined. You get back all devices ids\n     *\n     * @param devicetype devicetype like 42 oder undefindes\n     * @returns return an array with all device ids for a device type\n     */\n    private async getDeviceIdsByType(devicetype?: number): Promise<ifDeviceId[]> {\n        const deviceids: ifDeviceId[] = [];\n        const states = await this.states.getStatesAllAsync('devices.*.type');\n        if (states) {\n            for (const key in states) {\n                const value = states[key];\n                if (value?.val && (devicetype === value?.val || devicetype === undefined)) {\n                    deviceids.push({\n                        id: key.replace(`devices.`, '').replace('.type', ''),\n                        type: value.val,\n                    });\n                }\n            }\n        }\n        return deviceids;\n    }\n\n    /**\n     * Object changes in configuration will be written in existing configuration\n     */\n    private async initObjects(): Promise<void> {\n        const deviceids = await this.getDeviceIdsByType();\n        // eslint-disable-next-line @typescript-eslint/no-for-in-array\n        for (const i in deviceids) {\n            const type = deviceids[i].type;\n            const objects = Datapoints.getDeviceTypeList(type, this.language);\n            for (const j in objects) {\n                const id = `devices.${deviceids[i].id}.${j}`;\n                const oldobject = await this.states.getObjectAsync(id);\n                const newobject = objects[j] as any;\n                if (oldobject && newobject) {\n                    // cmmmon names excluded\n                    if (oldobject?.common?.name) {\n                        newobject.common.name = oldobject.common.name;\n                    }\n                    const object = {\n                        ...oldobject,\n                        ...newobject,\n                    };\n                    await this.states.setObjectAsync(id, object);\n                }\n            }\n        }\n    }\n\n    /**\n     * Lupusec Status to Apple Home Status\n     *\n     * @param mode_pc_a Area 1 or 2 (1,2)\n     * @param alarm_ex 0 = Disarm, 1 = Arm, 2 = Home1, 3 = Home2, 4 = Home3\n     * @returns status for Apple home as number if set. If not set the return valus is undefined\n     */\n    private getAppleStautusFromLupusec(mode_pc_a: number, alarm_ex: number): number | undefined {\n        let alarm = undefined; // disarm\n        const vmode_pc_a = Number(mode_pc_a);\n        const valarm_ex = Number(alarm_ex);\n        switch (vmode_pc_a) {\n            case 0: // Disarm\n                alarm = 3; // disarm = 3 (The security system is disarmed)\n                break;\n            case 1: // Arm\n                alarm = 1; // awayArm = 1 (The home is unoccupied)\n                break;\n            case 2: // Home\n                alarm = 2; // nightArm = 2 (The home is occupied and residents are sleeping)\n                break;\n            case 3: // Home\n                alarm = 0; // stayArm = 0 (The home is occupied and residents are active)\n                break;\n            case 4: // Home\n                alarm = 0; // stayArm = 0 (The home is occupied and residents are active)\n                break;\n            default:\n                break;\n        }\n        if (vmode_pc_a > 0 && valarm_ex == 1) {\n            alarm = 4; // triggered = 4 (the security system is triggered)\n        }\n        return alarm;\n    }\n\n    /**\n     * Apple Home Status to Lupusec Status\n     *\n     * @param applestatus Apple Status from 0 to 4\n     * @returns Lupsusec Status from 0 to 3\n     */\n    private getLupusecFromAppleStautus(applestatus: number): number | undefined {\n        let alarm = undefined;\n        switch (applestatus) {\n            case 0: // Home\n                alarm = 3; // stayArm = 0 (The home is occupied and residents are active)\n                break;\n            case 1: // Arm\n                alarm = 1; // awayArm = 1 (The home is unoccupied)\n                break;\n            case 2: // Home\n                alarm = 2; // nightArm = 2 (The home is occupied and residents are sleeping)\n                break;\n            case 3: // Disarm\n                alarm = 0; // disarm = 3 (The security system is disarmed)\n                break;\n            case 4: // Alarm triggered\n                break;\n            default:\n                break;\n        }\n        return alarm;\n    }\n\n    /**\n     * Gets from path the abssolute Url\n     *\n     * @param path path of the Url like /action/logout\n     * @returns full abaolute URI like https://foo.com/action/logout\n     */\n    private async getAbsoluteURI(path: string): Promise<string> {\n        const alarm_hostname = await Tools.lookup(this.adapter.config.alarm_hostname);\n        const aboluteURI =\n            this.adapter.config.alarm_https === true\n                ? `https://${alarm_hostname}${path}`\n                : `http://${alarm_hostname}${path}`;\n        return aboluteURI;\n    }\n\n    /**\n     * Gets Token from alarm system\n     *\n     * @param renew : optinal parameter, to get new Token\n     * @returns returns token\n     */\n    private async requestToken(renew?: boolean): Promise<string> {\n        if (renew === undefined) {\n            renew = false;\n        }\n        const path = urlTokenGet;\n        const lastupdate = this.getUnixTimestamp('Token') || 0;\n        const now = this.getUnixTimestampNow();\n        const diff = lastupdate + 60 * 1000 - now; // Token alle 60 Sekunden erneuern\n        if (this.token !== '' && renew === false && diff > 0) {\n            return this.token;\n        }\n        // get new Token\n        this.setUnixTimestamp('Token');\n        const requestconfig: axios.AxiosRequestConfig = {\n            httpsAgent: this.httpsagent,\n            httpAgent: this.httpagent,\n            timeout: this.axiostimeout,\n            maxRedirects: 0,\n            headers: {\n                Authorization: this.auth,\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            responseType: 'text',\n            transformResponse: res => {\n                return res; // Avoid automatic json parse\n            },\n        };\n        this.adapter.log.debug(`Request Token ${path}`);\n        const response = await this.axiosinstance.get(await this.getAbsoluteURI(path), requestconfig);\n        if (response.data) {\n            response.data = Tools.JsonParseDelSonderszeichen(response.data);\n        }\n        this.token = response.data.message;\n        this.adapter.log.debug(`New Token: ${this.token}`);\n        return this.token;\n    }\n\n    /**\n     * make a http request get\n     *\n     * @param path path of the request like /action/logout\n     * @param config optional parameter, list of configuraion\n     * @returns Response of the request\n     */\n    private async requestGet(path: string, config: axios.AxiosRequestConfig = {}): Promise<any> {\n        const unixtime = this.getUnixTimestampNow();\n        const token = await this.requestToken(false);\n        const requestconfig: axios.AxiosRequestConfig = {\n            httpsAgent: this.httpsagent,\n            httpAgent: this.httpagent,\n            timeout: this.axiostimeout,\n            maxRedirects: 0,\n            headers: {\n                Authorization: this.auth,\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                'X-Token': token,\n            },\n            responseType: 'text',\n            transformResponse: res => {\n                return res; // Avoid automatic json parse\n            },\n            ...config,\n        };\n        this.adapter.log.debug(`Request Get ${path}`);\n        const response = await this.axiosinstance.get(await this.getAbsoluteURI(path), requestconfig);\n        if (response.data) {\n            response.data = Tools.JsonParseDelSonderszeichen(response.data);\n        }\n        return {\n            data: response.data,\n            unixtime: unixtime,\n        };\n    }\n\n    /**\n     * Post Request\n     *\n     * @param path url for post\n     * @param data  payload for post statement\n     * @param config config\n     * @returns response of post request\n     */\n    private async requestPost(path: string, data: object, config?: axios.AxiosRequestConfig): Promise<any> {\n        const token = await this.requestToken(false); // await this.requestToken(true);\n        const requestconfig: axios.AxiosRequestConfig = {\n            httpsAgent: this.httpsagent,\n            httpAgent: this.httpagent,\n            timeout: this.axiostimeout,\n            maxRedirects: 0,\n            headers: {\n                Authorization: this.auth,\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                'X-Token': token,\n            },\n            responseType: 'text',\n            transformResponse: res => {\n                return res; // Avoid automatic json parse\n            },\n            ...config,\n        };\n        const unixtime = this.getUnixTimestampNow();\n        const text = querystring.stringify(data as querystring.ParsedUrlQueryInput);\n        this.adapter.log.debug(`Request Post ${path} with payload ${JSON.stringify(data)}`);\n        const response = await this.axiosinstance.post(await this.getAbsoluteURI(path), text, requestconfig);\n        if (response.data) {\n            response.data = Tools.JsonParseDelSonderszeichen(response.data);\n        }\n        return {\n            data: response.data,\n            unixtime: unixtime,\n        };\n    }\n\n    private async device_mapping_all(states: any): Promise<any> {\n        const statesmapped: any = {};\n        const id = states.id || states.sid;\n        const idc = `devices.${id}`;\n        const type = states.type || states.stype || (await this.states.getStateAsync(`${idc}.type`))?.val;\n        if (type === undefined) {\n            return;\n        }\n        for (const name in states) {\n            let value = states[name];\n            // For Power Switches, 2 new States\n            if (name === 'rssi' && value !== undefined) {\n                const regstat = /{WEB_MSG_(.+)}(.*)/gm;\n                const m = regstat.exec(value);\n                if (m) {\n                    value = m[2] ? Number(m[2].trim()) : 0;\n                } else {\n                    value = 0;\n                }\n            }\n            if (name === 'reachable' && states.rssi !== undefined) {\n                const regstat = /{WEB_MSG_(.+)}(.*)/gm;\n                const m = regstat.exec(states.rssi);\n                if (m) {\n                    value = m[2] && Number(m[2].trim()) > 0 ? true : false;\n                } else {\n                    value = false;\n                }\n            }\n            // type_name : name of the sensor, like NUKI\n            if (name === 'type_name') {\n                value = Datapoints.getDeviceNameByDeviceType(type);\n            }\n            // alarm_status_ex: value of alarm_status as booelean\n            if (name === 'alarm_status_ex') {\n                if (states.alarm_status !== undefined) {\n                    value = states.alarm_status ? true : false;\n                }\n            }\n            // status: make it more readdable\n            if (name === 'status') {\n                const regstat = /\\{WEB_MSG_(DC|DL)_(.+)\\}/gm;\n                const m = regstat.exec(value);\n                if (m && m.length > 1) {\n                    value = m[2];\n                } // .toLowerCase();\n            }\n            if (name === 'logmsg' && states.msg !== undefined) {\n                value = states.msg;\n            }\n            if (type === 17 || type === 37) {\n                if (name === 'sresp_button_123' && states.sresp_panic !== undefined) {\n                    value = states.sresp_panic;\n                }\n                if (name === 'sresp_button_456' && states.sresp_fire !== undefined) {\n                    value = states.sresp_fire;\n                }\n                if (name === 'sresp_button_789' && states.sresp_medical !== undefined) {\n                    value = states.sresp_medical;\n                }\n            }\n            // For Power Switches,\n            if (type === 24 || type === 48 || type === 50 || type === 66) {\n                if (name === 'pd') {\n                    value = (await this.states.getStateAsync(`${idc}.pd`))?.val || 0;\n                }\n                if (name === 'power' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_PSM_POWER}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n                if (name === 'powertotal' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_POWER_METER_ENERGY}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n            }\n            if (type === 52 && name.match(/appliance_\\d+\\.mode_name_\\d+/gm)) {\n                const regstat = /appliance_\\d+\\.(mode_name_\\d+)/gm;\n                const m = regstat.exec(name);\n                if (m && states[m[1]]) {\n                    value = states[m[1]];\n                }\n            }\n            if (type === 54 || type === 78) {\n                if (name === 'actual_temperature' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_TS_DEGREE}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n                if (name === 'actual_humidity' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_RH_HUMIDITY}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n                if (name === 'actual_lux' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_LM_LUX}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n            }\n            if (type === 57) {\n                if (name === 'nuki_state' && states.nuki !== undefined) {\n                    for (const i in this.adapter.config.nuki_doorsensors) {\n                        const nuki = this.adapter.config.nuki_doorsensors[i].nuki;\n                        const door = this.adapter.config.nuki_doorsensors[i].door;\n                        if (id === nuki && door) {\n                            const doorvalue = (await this.states.getStateAsync(`devices.${door}.status_ex`))?.val;\n                            const valuenuki = Number(states.nuki);\n                            value = valuenuki === 3 && doorvalue === true ? 0 : valuenuki;\n                            break;\n                        }\n                    }\n                }\n                if (name === 'nuki_action') {\n                    value = (await this.states.getStateAsync(`${idc}.nuki_action`))?.val;\n                }\n                if (name == 'reachable' && Tools.hasProperty(states, 'consumer_id')) {\n                    value = await this.isNukiAllive(states.consumer_id);\n                }\n            }\n            if (type === 66 || type === 74) {\n                if (name === 'status_ex') {\n                    const regstat = /\\{WEB_MSG_DIMMER_(ON|OFF)\\}/gm;\n                    const m = regstat.exec(states.status);\n                    value = m && m[1] === 'ON' ? true : false;\n                }\n            }\n            // Shutter, if shutter level (0-100%) change, the swich value will change too\n            if (type === 76) {\n                if (name === 'switch') {\n                    const valuelevel = (await this.states.getStateAsync(`${idc}.level`))?.val || undefined;\n                    value = valuelevel !== undefined && states.level !== undefined && states.level > value ? 1 : 0;\n                }\n                if (name === 'on_time' && value !== undefined) {\n                    value = Tools.round(value / 10, 0.1) || 0;\n                }\n                if (name === 'off_time' && value !== undefined) {\n                    value = Tools.round(value / 10, 0.1) || 0;\n                }\n            }\n            if (type === 79) {\n                if (name === 'actual_temperature' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_TS_DEGREE}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n                if (name === 'valve' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_TRV_VALVE}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n                if (name === 'set_temperature' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_TRV_SETPOINT}\\s*([\\d.]+)/gm;\n                    const m = regstat.exec(states.status);\n                    if (m) {\n                        value = Number(m[1].trim());\n                    }\n                }\n                if (name === 'off' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_TRV_(OFF)}/gm;\n                    const m = regstat.exec(states.status);\n                    if (m && m[1] === 'OFF') {\n                        value = true;\n                    } else {\n                        value = false;\n                    }\n                }\n                if (name === 'mode' && states.status !== undefined) {\n                    const regstat = /{WEB_MSG_TRV_(AUTO|MANUAL)}/gm;\n                    const m = regstat.exec(states.status);\n                    if (m && m[1] === 'AUTO') {\n                        value = 1;\n                    }\n                    if (m && m[1] === 'MANUAL') {\n                        value = 0;\n                    }\n                }\n                if (name === 'thermo_offset' && value !== undefined) {\n                    value = Tools.round(value / 10, 0.5);\n                }\n            }\n            statesmapped[name] = value;\n        }\n        return statesmapped;\n    }\n\n    /**\n     *\n     * @param id id of webcam\n     * @param states status\n     * @returns image and stream of webcam\n     */\n    private webcam_mapping_all(id: string, states: any): any {\n        const statesmapped = states;\n        const port = this.adapter.config.webcam_port;\n        const bind = this.adapter.config.webcam_bind;\n        const host = bind !== '0.0.0.0' ? bind : this.adapter.host;\n        if (this.adapter.config.webcam_providing && statesmapped.url) {\n            statesmapped.image = `http://${host}:${port}/image/${id}`;\n            statesmapped.stream = `http://${host}:${port}/stream/${id}`;\n        } else {\n            statesmapped.image = '';\n            statesmapped.stream = '';\n        }\n        return statesmapped;\n    }\n\n    /**\n     *\n     * @param states states\n     * @returns maped states\n     */\n    private zentrale_mapping_all(states: any): any {\n        const statesmapped = states;\n        statesmapped.apple_home_a1 = this.getAppleStautusFromLupusec(states.mode_pc_a1, states.alarm_ex);\n        statesmapped.apple_home_a2 = this.getAppleStautusFromLupusec(states.mode_pc_a2, states.alarm_ex);\n        if (states.rssi !== undefined) {\n            statesmapped.reachable = states.rssi > 0 ? true : false;\n        }\n        return statesmapped;\n    }\n\n    private dummyDevicePost(id: string): void {\n        this.setUnixTimestamp(id);\n    }\n\n    private async haExecutePost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlHaExecutePost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceEditThermoPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceEditThermoPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceEditPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const ressultold = await this.requestPost(urlDeviceEditGet, { id: form.id });\n        if (ressultold?.data?.forms?.ssform) {\n            const ssform = ressultold.data.forms.ssform;\n            for (const name in ssform) {\n                const value = ssform[name];\n                if (!Tools.hasProperty(form, name)) {\n                    switch (typeof value) {\n                        case 'string':\n                            if (value.length > 0) {\n                                form[name] = value;\n                            }\n                            break;\n                        default:\n                            if (value) {\n                                form[name] = value;\n                            }\n                            break;\n                    }\n                }\n            }\n            const result = await this.requestPost(urlDeviceEditPost, form);\n            this.setUnixTimestamp(id);\n            return result;\n        }\n    }\n\n    private async deviceEditShutterPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceEditShutterPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceSwitchPSSPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceSwitchPSSPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceNukiCmd(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceNukiCmd, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceEditGet(form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceEditGet, form);\n        return result;\n    }\n\n    private async deviceEditThermoGet(form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceEditThermoGet, form);\n        return result;\n    }\n\n    private async deviceEditMeterGet(form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceEditMeterGet, form);\n        return result;\n    }\n\n    private async deviceEditShutterGet(form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceEditShutterGet, form);\n        return result;\n    }\n\n    private async deviceEditMeterPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceEditMeterPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceSwitchDimmerPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceSwitchDimmerPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async panelCondPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlPanelCondPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceDoUPICPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceDoUPICPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    /**\n     * Sends SMS by card\n     *\n     * @param id id of device\n     * @param form payload to send sms\n     * @returns no value\n     */\n    public async sendSMSPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlSendSMSPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    /**\n     * Sends SMS by Gateway\n     *\n     * @param id id of device\n     * @param form payload to send sms\n     * @returns no value\n     */\n    public async sendSMSgwTestPost(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlSmsgwTestPost, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async deviceHueColorControl(id: string, form: any): Promise<any> {\n        if (!form) {\n            return;\n        }\n        const result = await this.requestPost(urlDeviceHueColorControl, form);\n        this.setUnixTimestamp(id);\n        return result;\n    }\n\n    private async logoutPost(): Promise<any> {\n        const result = await this.requestGet(urlLogoutPost);\n        this.setUnixTimestamp('logoutPost');\n        return result;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private async isNukiAllive(id?: string): Promise<boolean | undefined> {\n        const result = await this.requestGet(urlNukiGet);\n        if (result?.data?.forms?.nukiform) {\n            const nukis = result.data.forms.nukiform;\n            if (nukis.url1) {\n                // const url = nukis.url1;\n                const url = nukis.url1.match(/^(http|https):\\/\\//gm) ? nukis.url1 : `http:\\\\${nukis.url1}`;\n                const myURL = new URL(url);\n                if (myURL) {\n                    const proberesult = await Tools.probe(myURL.hostname, Number(myURL.port));\n                    return proberesult;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    private async getAllStatusLupusecEntries(): Promise<void> {\n        const result = await this.requestGet(urlPanelCondGet);\n        const data = {\n            unixtime: result.unixtime,\n            zentrale: result.data.updates,\n        };\n        if (result?.data?.forms?.pcondform1) {\n            for (const key in result.data.forms.pcondform1) {\n                const value = result.data.forms.pcondform1[key];\n                data.zentrale[`${key}_pc_a1`] = value;\n            }\n        }\n        if (result?.data?.forms?.pcondform2) {\n            for (const key in result.data.forms.pcondform2) {\n                const value = result.data.forms.pcondform2[key];\n                data.zentrale[`${key}_pc_a2`] = value;\n            }\n        }\n        await this.setAllStatusLupusecEntries(data);\n    }\n\n    private async getAllSMSLupusecEntries(): Promise<void> {\n        const data = {\n            unixtime: this.getUnixTimestampNow(),\n            sms: {},\n        };\n        await this.setAllSMSLupusecEntries(data);\n    }\n\n    private async getAllWebcamLupusecEntries(): Promise<void> {\n        const webcams: any = {};\n        const results = await this.requestGet(urlIpcamGet);\n        if (!results || !results.data) {\n            return;\n        }\n        if (results?.data?.forms?.ipcamform) {\n            for (const name in results.data.forms.ipcamform) {\n                const value = results.data.forms.ipcamform[name];\n                const index = Number(name.slice(-1));\n                // const url = results.data.forms.ipcamform[`url${index}`];\n                // if (!url) continue;\n                if (index >= 1 && index <= 9) {\n                    if (!webcams[`cam${index}`]) {\n                        webcams[`cam${index}`] = {};\n                    }\n                    webcams[`cam${index}`][name.slice(0, -1)] = value;\n                }\n            }\n        }\n        const data = {\n            unixtime: results.unixtime,\n            webcams: webcams,\n        };\n        await this.setAllWebcamLupusecEntries(data);\n    }\n\n    private async getAllDeviceLupusec(): Promise<void> {\n        const parallelprocessing = true;\n        const requestarray = [];\n        const devices: any = {};\n        requestarray.push(async () => await this.getAllDeviceLupusecEntries());\n        requestarray.push(async () => await this.getAllDeviceLupusecEditEntries());\n        requestarray.push(async () => await this.getAllDeviceLupusecLogs());\n        let results: any = [];\n        if (parallelprocessing || this.adapter.config.option_pollfaster) {\n            results = await Promise.all(\n                requestarray.map(async request => {\n                    let result = {};\n                    const isasync = Tools.isAsync(request);\n                    result = isasync ? await request() : request();\n                    return result;\n                }),\n            );\n        } else {\n            for (const request of requestarray) {\n                let result = {};\n                const isasync = Tools.isAsync(request);\n                result = isasync ? await request() : request();\n                results.push(result);\n            }\n        }\n        let unixtime = 0;\n        for (const idx in results) {\n            const result: any = results[idx];\n            for (const idd in result.devices) {\n                devices[idd] = {\n                    ...result.devices[idd],\n                    ...devices[idd],\n                };\n            }\n            if (result && result.unixtime > unixtime) {\n                unixtime = result.unixtime;\n            }\n        }\n        const data = {\n            unixtime: unixtime,\n            devices: devices,\n        };\n        await this.setAllDeviceLupusecEntries(data);\n    }\n\n    private async getAllDeviceLupusecLogs(): Promise<any> {\n        const devices: any = {};\n        const results = await this.requestPost(urlLogsGet, {\n            max_count: 10,\n        });\n        if (!results || !results.data) {\n            return;\n        }\n        if (results?.data?.logrows) {\n            const states = await this.states.getStatesAllAsync('devices.*');\n            for (const i in results.data.logrows) {\n                const row = results.data.logrows[i];\n                const regex = /{WEB_MSG_DEVICE_AREA_ZONE}[\\t\\s]*(\\d*)[\\t\\s]*(\\d*)/gm;\n                const m = regex.exec(row.source);\n                if (m && m[1] && m[2]) {\n                    const area = Number(m[1]);\n                    const zone = Number(m[2]);\n                    let id = Object.keys(states).find(\n                        key =>\n                            key.startsWith('devices') &&\n                            key.endsWith('zone') &&\n                            states[key].val === zone &&\n                            states[key.replace(/zone$/, 'area')]?.val === area,\n                    );\n                    // const id = await this.getDeviceIdByAreaZone(area, zone);\n                    if (id) {\n                        id = id.replace(`devices.`, '').replace('.zone', '');\n                        if (!devices[id] || !devices[id].logtime || row.log_time > devices[id].log_time) {\n                            devices[id] = {\n                                ...row,\n                                id: id,\n                                area: area,\n                                zone: zone,\n                                // ...devices[id],\n                            };\n                        }\n                    }\n                }\n            }\n        }\n        const data = {\n            unixtime: results?.unixtime,\n            devices: devices,\n        };\n        // await this.setAllDeviceLupusecEntries(data);\n        return data;\n    }\n\n    private async getAllDeviceLupusecEditEntries(): Promise<any> {\n        const devices: any = {};\n        const deviceids = await this.getDeviceIdsByType();\n        let unixtime = 0;\n        const requestarray = [];\n        const parallelprocessing = true;\n        for (const deviceid of deviceids) {\n            const type = deviceid.type;\n            const id = deviceid.id;\n            if ([7, 17, 81, 37, 50, 76, 79, 81].includes(type)) {\n                if (type) {\n                    requestarray.push(\n                        async () =>\n                            await this.deviceEditGet({\n                                id: id,\n                            }),\n                    );\n                }\n            }\n            if (type === 50) {\n                requestarray.push(\n                    async () =>\n                        await this.deviceEditMeterGet({\n                            id: id,\n                        }),\n                );\n            }\n            if (type === 76) {\n                requestarray.push(\n                    async () =>\n                        await this.deviceEditShutterGet({\n                            id: id,\n                        }),\n                );\n            }\n            if (type === 79) {\n                requestarray.push(\n                    async () =>\n                        await this.deviceEditThermoGet({\n                            id: id,\n                        }),\n                );\n            }\n        }\n        let results = [];\n        if (parallelprocessing || this.adapter.config.option_pollfaster) {\n            results = await Promise.all(\n                requestarray.map(async request => {\n                    let result = {};\n                    const isasync = Tools.isAsync(request);\n                    result = isasync ? await request() : request();\n                    return result;\n                }),\n            );\n        } else {\n            for (const request of requestarray) {\n                let result = {};\n                const isasync = Tools.isAsync(request);\n                result = isasync ? await request() : request();\n                results.push(result);\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-for-in-array\n        for (const idx in results) {\n            const result: any = results[idx];\n            if (result?.data?.forms?.ssform) {\n                result.data.form = result.data.forms.ssform;\n            } // Type 7, 81, 37, 50, 76, 79\n            if (result?.data?.forms?.thermoform) {\n                result.data.form = result.data.forms.thermoform;\n            } // Type 79\n            if (result?.data?.forms?.shutterform) {\n                result.data.form = result.data.forms.shutterform;\n            } // Type 76\n            if (result?.data?.forms?.meterform) {\n                result.data.form = result.data.forms.meterform;\n            } // Type 50\n            if (result?.data?.forms) {\n                delete result.data.forms;\n            }\n            if (result?.data?.form) {\n                const device = result.data.form;\n                if (device.id || device.sid) {\n                    const id = device.id || device.sid;\n                    devices[id] = {\n                        ...devices[id],\n                        ...device,\n                    };\n                }\n            }\n            if (result && result.unixtime > unixtime) {\n                unixtime = result.unixtime;\n            }\n        }\n        const data = {\n            unixtime: unixtime,\n            devices: devices,\n        };\n        // await this.setAllDeviceLupusecEntries(data);\n        return data;\n    }\n\n    private async getAllDeviceLupusecEntries(): Promise<any> {\n        const resultDeviceListGet = await this.requestGet(urlDeviceListGet);\n        const resultDevicePSSListGet = await this.requestGet(urlDevicePSSListGet);\n        const resultDeviceListUPICGet = await this.requestGet(urlDeviceListUPICGet);\n        const results = {\n            unixtime: resultDeviceListUPICGet.unixtime,\n            data: {\n                DeviceListGet: resultDeviceListGet,\n                DevicePSSListGet: resultDevicePSSListGet,\n                DeviceListUPICGet: resultDeviceListUPICGet,\n            },\n        };\n        if (!results || !results.data) {\n            return;\n        }\n\n        const devices: any = {};\n        if (results?.data?.DeviceListGet?.data?.senrows) {\n            for (const device of results.data.DeviceListGet.data.senrows) {\n                if (device.id || device.sid) {\n                    const id = device.id || device.sid;\n                    devices[id] = { ...devices[id], ...device };\n                }\n            }\n        }\n        if (results?.data?.DevicePSSListGet?.data?.pssrows) {\n            for (const device of results.data.DevicePSSListGet.data.pssrows) {\n                if (device.id || device.sid) {\n                    const id = device.id || device.sid;\n                    devices[id] = { ...devices[id], ...device };\n                }\n            }\n        }\n        if (results?.data?.DeviceListUPICGet?.data?.upicrows) {\n            for (const device of results.data.DeviceListUPICGet.data.upicrows) {\n                if (device.id || device.sid) {\n                    const id = device.id || device.sid;\n                    devices[id] = { ...devices[id], ...device };\n                }\n            }\n        }\n        const data = {\n            unixtime: results?.unixtime,\n            devices: devices,\n        };\n        // await this.setAllDeviceLupusecEntries(data);\n        return data;\n    }\n\n    /**\n     *\n     * @param name string or object with name like de: 't\u00FCr', en: 'door' or 't\u00FCr'\n     * @param extname string or object with name kike de: 'Status', en: 'state' or 'Status'\n     * @returns string or object like de: Status (t\u00FCr), en: state (door) or Status (t\u00FCr)\n     */\n    private extendCommonName(name: any, extname?: any): any {\n        if (!extname || !name) {\n            return name;\n        }\n        if (typeof name === 'object' && typeof extname === 'object') {\n            const newnames: any = {};\n            for (const language in name) {\n                newnames[language] = extname[language] ? `${extname[language]} (${name[language]})` : name[language];\n            }\n            return newnames;\n        }\n        if (typeof name === 'object' && typeof extname === 'string') {\n            const newnames: any = {};\n            for (const language in name) {\n                newnames[language] = `${extname} (${name[language]})`;\n            }\n            return newnames;\n        }\n        if (typeof name === 'string' && typeof extname === 'string') {\n            const newname = `${extname} (${name})`;\n            return newname;\n        }\n        if (typeof name === 'string' && typeof extname === 'object') {\n            const newname = extname[this.language] ? `${extname[this.language]} (${name})` : name;\n            return newname;\n        }\n    }\n\n    private async createObjectSetStates(\n        id: string,\n        name: string,\n        value: any,\n        unixtime: number,\n        obj: any,\n        devicename?: any,\n    ): Promise<void> {\n        // const object = Tools.copyObject(obj);  // copy of the object\n        const execdelay = 0; // 100; // this.adapter.config.alarm_polltime * 1000;\n        const object = obj;\n        const sid = `${id}.${name}`;\n        if (object.common.name === '%value%') {\n            object.common.name = value !== undefined ? value : undefined;\n        }\n        if (typeof object.common.name === 'string' && object.common.name.indexOf('%value%') !== -1) {\n            object.common.name = value !== undefined ? object.common.name.replace('%value%', value) : undefined;\n        }\n        if (object.common.name) {\n            object.common.name = this.extendCommonName(object.common.name, devicename);\n        }\n        await this.states.setObjectNotExistsAsync(sid, {\n            type: object.type,\n            common: object.common,\n            native: {},\n        });\n        if (object.type === 'channel' || object.type === 'device') {\n            return;\n        }\n        const statevalue = Tools.convertPropertyType(value, object.common.type);\n        if (statevalue === null || statevalue === undefined) {\n            return;\n        }\n        const stateget = await this.states.getStateAsync(sid);\n        // const stateunixtime = this.getUnixTimestamp(sid) +\n        const stateunixtime =\n            this.getUnixTimestamp(sid) > 0 ? this.getUnixTimestamp(sid) + execdelay : this.getUnixTimestamp(sid);\n        // const stateunixtime = stateget && stateget.ts ? stateget.ts : undefined;\n        if (stateget && stateunixtime === undefined && stateget.ack === true && stateget.val === statevalue) {\n            this.delUnixTimestamp(sid);\n            return;\n        }\n        if (!stateget || stateunixtime === undefined || (stateget.ack === true && stateget.val !== statevalue)) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const result = await this.states.setStateNotExistsAsync(sid, { val: statevalue, ack: true });\n            this.delUnixTimestamp(sid);\n            if (stateget) {\n                this.adapter.log.debug(\n                    `State ${sid} changed value from ${stateget.val} to ${statevalue} and ack from ${stateget.ack} to true)`,\n                );\n            } else {\n                this.adapter.log.debug(`State ${sid} changed to value ${statevalue} and ack to true)`);\n            }\n            return;\n        }\n        if (!stateget || (stateget.ack === false && stateunixtime > 0 && stateunixtime < unixtime)) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const result = await this.states.setStateNotExistsAsync(sid, { val: statevalue, ack: true });\n            this.delUnixTimestamp(sid);\n            if (stateget) {\n                this.adapter.log.debug(\n                    `State ${sid} changed value from ${stateget.val} to ${statevalue} and ack from ${stateget.ack} to true)`,\n                );\n            } else {\n                this.adapter.log.debug(`State ${sid} changed to value ${statevalue} and ack to true)`);\n            }\n            return;\n        }\n    }\n\n    private async setAllDeviceLupusecEntries(results: any): Promise<void> {\n        const unixtime = results.unixtime;\n        const devices = results.devices;\n        const promisearray = [];\n        for (const id in devices) {\n            const device = devices[id];\n            const idc = `devices.${id}`;\n            const cname = device.name || device.sname;\n            const type = device.type || device.stype || (await this.states.getStateAsync(`${idc}.type`))?.val;\n            if (type === undefined) {\n                continue;\n            }\n            let objects = Datapoints.getDeviceTypeList(type, this.language);\n            if (!objects) {\n                this.adapter.log.warn(\n                    `Ger\u00E4tetyp ${type} f\u00FCr das Ger\u00E4t ${id} mit Namen ${cname || ''} wird nicht unterst\u00FCtzt!`,\n                );\n                objects = Datapoints.getDeviceTypeList(0, this.language);\n            }\n            const icon = Datapoints.getDeviceIconByDeviceType(type);\n            const oldobject = await this.states.getObjectAsync(idc);\n            if (cname !== undefined && oldobject && oldobject.common && oldobject.common.name !== cname) {\n                const result = await this.states.setObjectAsync(idc, {\n                    type: 'channel',\n                    common: {\n                        name: cname,\n                        icon: icon,\n                        statusStates: {\n                            onlineId: 'reachable',\n                        },\n                    },\n                    native: {},\n                });\n                if (result) {\n                    this.adapter.log.info(`Neuer Ger\u00E4tname f\u00FCr ${id} ist ${cname || ''}`);\n                }\n            } else {\n                const result = await this.states.setObjectNotExistsAsync(idc, {\n                    type: 'channel',\n                    common: {\n                        name: cname,\n                        icon: icon,\n                        statusStates: {\n                            onlineId: 'reachable',\n                        },\n                    },\n                    native: {},\n                });\n                if (result) {\n                    this.adapter.log.info(`Ger\u00E4t ${id} mit Namen ${cname || ''} hinzugef\u00FCgt`);\n                }\n            }\n            // Add owen (missing) datapoints\n            for (const dp in objects) {\n                if (!Tools.hasProperty(device, dp)) {\n                    device[dp] = undefined;\n                }\n            }\n            // Daten erweitern\n            const devicemappend = await this.device_mapping_all(device);\n            for (const dp in objects) {\n                const val: any = objects[dp];\n                if (this.adapter.config.option_pollfaster) {\n                    promisearray.push(async () => {\n                        await this.createObjectSetStates(idc, dp, devicemappend[dp], unixtime, val, cname);\n                    });\n                } else {\n                    await this.createObjectSetStates(idc, dp, devicemappend[dp], unixtime, val, cname);\n                }\n            }\n        }\n        if (promisearray) {\n            await Promise.all(promisearray.map(async func => await func()));\n        }\n    }\n\n    // Status\n    private async setAllStatusLupusecEntries(results: any): Promise<void> {\n        const zentrale = results.zentrale;\n        const unixtime = results.unixtime;\n        const promisearray = [];\n        const idc = 'status';\n        const objects = Datapoints.getStatusTypeList(this.language);\n        // Add owen (missing) datapoints\n        for (const dp in objects) {\n            if (!Tools.hasProperty(zentrale, dp)) {\n                zentrale[dp] = undefined;\n            }\n        }\n        // Daten erweitern\n        const zentralemapped = this.zentrale_mapping_all(zentrale);\n        const cname = (await this.states.getObjectAsync(idc))?.common?.name;\n        for (const dp in objects) {\n            if (this.adapter.config.option_pollfaster) {\n                promisearray.push(\n                    async () => await this.createObjectSetStates(idc, dp, zentralemapped[dp], unixtime, objects[dp]),\n                    cname,\n                );\n            } else {\n                await this.createObjectSetStates(idc, dp, zentralemapped[dp], unixtime, objects[dp], cname);\n            }\n        }\n        if (promisearray) {\n            await Promise.all(promisearray.map(async func => await func()));\n        }\n    }\n\n    private async setAllSMSLupusecEntries(results: any): Promise<void> {\n        const sms = results.sms;\n        const unixtime = results.unixtime;\n        const objects = Datapoints.getSMSTypeList(this.language);\n        const idc = 'sms';\n        const promisearray = [];\n        // Add owen (missing) datapoints\n        for (const dp in objects) {\n            if (!Tools.hasProperty(sms, dp)) {\n                sms[dp] = (await this.states.getStateAsync(`${idc}.${dp}`))?.val;\n            }\n        }\n        const cname = (await this.states.getObjectAsync(idc))?.common?.name;\n        for (const dp in objects) {\n            if (this.adapter.config.option_pollfaster) {\n                promisearray.push(\n                    async () => await this.createObjectSetStates(idc, dp, sms[dp], unixtime, objects[dp], cname),\n                );\n            } else {\n                await this.createObjectSetStates(idc, dp, sms[dp], unixtime, objects[dp], cname);\n            }\n        }\n        if (promisearray) {\n            await Promise.all(promisearray.map(async func => await func()));\n        }\n    }\n\n    private async setAllWebcamLupusecEntries(results: any): Promise<void> {\n        const unixtime = results.unixtime;\n        const webcams = results.webcams;\n        const promisearray = [];\n        const objects = Datapoints.getWebcamTypeList(this.language);\n        for (const id in webcams) {\n            const webcam = webcams[id];\n            const idc = `webcams.${id}`;\n            const cname = webcam.name || `Webcam ${idc.slice(-1)} ` || '';\n            const result = await this.states.setObjectNotExistsAsync(idc, {\n                type: 'channel',\n                common: {\n                    name: cname,\n                    icon: '/icons/webcam.png',\n                },\n                native: {},\n            });\n            if (result) {\n                this.adapter.log.info(`Webcam ${id} mit Namen ${cname} hinzugef\u00FCgt`);\n            }\n            // Add owen (missing) datapoints\n            for (const dp in objects) {\n                if (!Tools.hasProperty(webcam, dp)) {\n                    webcam[dp] = undefined;\n                }\n            }\n            // Daten erweitern\n            const webcammapped = this.webcam_mapping_all(id, webcam);\n            for (const dp in objects) {\n                if (this.adapter.config.option_pollfaster) {\n                    promisearray.push(\n                        async () =>\n                            await this.createObjectSetStates(\n                                `webcams.${id}`,\n                                dp,\n                                webcammapped[dp],\n                                unixtime,\n                                objects[dp],\n                            ),\n                    );\n                } else {\n                    await this.createObjectSetStates(`webcams.${id}`, dp, webcammapped[dp], unixtime, objects[dp]);\n                }\n            }\n        }\n        if (promisearray) {\n            await Promise.all(promisearray.map(async func => await func()));\n        }\n        if (this.adapter.config.webcam_providing) {\n            const caminstance = Webcam.getInstance(this.adapter, webcams);\n            await caminstance.startServer();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id id\n     * @param state state\n     */\n    public async onStateChange(id: string, state: states.ifState): Promise<void> {\n        try {\n            if (state && state.ack === false) {\n                await this.states.setStateNotExistsAsync(id, { val: state.val, ack: state.ack });\n                if (id.startsWith(`${this.adapter.namespace}.devices.`)) {\n                    const execdelay = 0; // in milliseconds - this.adapter.config.alarm_polltime * 1000\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const icchannelabs = id.split('.').slice(0, 4).join('.'); //  lupusec.0.devices.ZS:a61d01\n                    const idchannel = id.split('.').slice(2, 4).join('.'); //  devices.ZS:a61d01\n                    const iddevice = id.split('.').slice(2).join('.'); // devices.ZS:a61d01.status_ex\n                    const channel = id.split('.').slice(3, 4).join('.'); // Device ID - ZS:a61d01\n                    const name = id.split('.').slice(-1).join('.'); // statusname - status_ex\n                    const zone = (await this.states.getStateAsync(`${idchannel}.zone`))?.val;\n                    const area = (await this.states.getStateAsync(`${idchannel}.area`))?.val;\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const type = (await this.states.getStateAsync(`${idchannel}.type`))?.val;\n                    // Type 24,48,66\n                    if (name === 'status_ex') {\n                        const value = state.val === true ? 'on' : 'off';\n                        const valuepd =\n                            Number((await this.states.getStateAsync(`${idchannel}.pd`))?.val || 0) * 60 || 0;\n                        const valuepdtxt = !valuepd ? '' : `:${valuepd}`;\n                        const exec = `a=${area}&z=${zone}&sw=${value}&pd=${valuepdtxt}`;\n                        await this.haExecutePost(iddevice, {\n                            exec: exec,\n                        });\n                    } else if (name === 'pd') {\n                        // Type 24,48,66\n                        this.dummyDevicePost(iddevice);\n                    } else if (name === 'factor') {\n                        // Type 50\n                        await this.deviceEditMeterPost(iddevice, {\n                            id: channel,\n                            factor: state.val,\n                        });\n                    } else if (name.startsWith('mode_name_')) {\n                        // Type 52 (Univeral IR Controller)\n                        const mode = name.replace('mode_name_', '');\n                        await this.deviceDoUPICPost(iddevice, {\n                            id: channel,\n                            mode: mode,\n                        });\n                    } else if (name === 'leds') {\n                        // Type 52 (Univeral IR Controller)\n                        await this.deviceDoUPICPost(iddevice, {\n                            id: channel,\n                            led: 'query',\n                        });\n                    } else if (name === 'nuki_action') {\n                        // Type 57\n                        let value: any = undefined;\n                        switch (state.val) {\n                            case 3:\n                                value = 1; // unlock\n                                break;\n                            case 1:\n                                value = 2; // lock\n                                break;\n                            case 0:\n                                value = 3; // open\n                                break;\n                            default:\n                                break;\n                        }\n                        this.adapter.clearTimeout(this.timerhandle[iddevice]);\n                        this.timerhandle[iddevice] = this.adapter.setTimeout(async () => {\n                            for (let i = 1; i <= 10; i++) {\n                                const result = await this.deviceNukiCmd(iddevice, {\n                                    id: channel,\n                                    action: value,\n                                });\n                                if (result?.data?.result === 1) {\n                                    break;\n                                }\n                                this.adapter.log.debug(\n                                    `Action on Nuki not executed, because no positive response from Nuki!. Will try it again in a few seconds!`,\n                                );\n                                await Tools.wait(1);\n                            }\n                        }, 0);\n                    } else if (name === 'level') {\n                        // Type 66\n                        this.adapter.clearTimeout(this.timerhandle[iddevice]);\n                        this.timerhandle[iddevice] = this.adapter.setTimeout(async () => {\n                            await this.deviceSwitchDimmerPost(iddevice, {\n                                id: channel,\n                                level: state.val,\n                            });\n                        }, execdelay);\n                    } else if (name === 'switch') {\n                        // Type 76\n                        const shutterstates: any = {\n                            0: 'on',\n                            1: 'off',\n                            2: 'stop',\n                        };\n                        const exec = `a=${area}&z=${zone}&shutter=${shutterstates[state.val]}`;\n                        await this.haExecutePost(iddevice, {\n                            exec: exec,\n                        });\n                    } else if (name === 'on_time') {\n                        // Type 76\n                        const on_time = Number(state.val);\n                        const off_time = Number((await this.states.getStateAsync(`${idchannel}.off_time`))?.val || 0);\n                        await this.deviceEditShutterPost(iddevice, {\n                            id: channel,\n                            on_time: Math.round(on_time * 10),\n                            off_time: Math.round(off_time * 10),\n                        });\n                    } else if (name === 'off_time') {\n                        // Type 76\n                        const on_time = Number((await this.states.getStateAsync(`${idchannel}.on_time`))?.val || 0);\n                        const off_time = Number(state.val);\n                        await this.deviceEditShutterPost(iddevice, {\n                            id: channel,\n                            on_time: Math.round(on_time * 10),\n                            off_time: Math.round(off_time * 10),\n                        });\n                    } else if (name === 'thermo_offset') {\n                        // Type 79\n                        await this.deviceEditThermoPost(iddevice, {\n                            id: channel,\n                            act: 't_offset',\n                            thermo_offset: Math.round(Number(state.val) * 10),\n                        });\n                    } else if (name === 'mode') {\n                        // Type 79\n                        await this.deviceEditThermoPost(iddevice, {\n                            id: channel,\n                            act: 't_schd_setting',\n                            thermo_schd_setting: state.val == 0 ? 0 : 1,\n                        });\n                    } else if (name === 'off') {\n                        // Type 79\n                        await this.deviceEditThermoPost(iddevice, {\n                            id: channel,\n                            act: 't_mode',\n                            thermo_mode: state.val == true ? 0 : 4,\n                        });\n                    } else if (name === 'set_temperature') {\n                        // Type 79\n                        this.adapter.clearTimeout(this.timerhandle[iddevice]);\n                        this.timerhandle[iddevice] = this.adapter.setTimeout(async () => {\n                            await this.deviceEditThermoPost(iddevice, {\n                                id: channel,\n                                act: 't_setpoint',\n                                thermo_setpoint: Math.trunc((100 * Math.round(2 * Number(state.val))) / 2),\n                            });\n                        }, execdelay);\n                    } else if (\n                        // Type 4,7,17,37,81\n                        name.startsWith('sresp_button_') ||\n                        name === 'sresp_emergency' ||\n                        name === 'name' ||\n                        name === 'send_notify' ||\n                        name === 'bypass' ||\n                        name === 'bypass_tamper' ||\n                        name === 'schar_latch_rpt' ||\n                        name === 'always_off'\n                    ) {\n                        let parameter = name;\n                        const form: any = {\n                            id: channel,\n                            sarea: area,\n                            szone: zone,\n                        };\n                        if (name === 'sresp_button_123') {\n                            parameter = 'sresp_panic';\n                        }\n                        if (name === 'sresp_button_456') {\n                            parameter = 'sresp_fire';\n                        }\n                        if (name === 'sresp_button_789') {\n                            parameter = 'sresp_medical';\n                        }\n                        if (name === 'name') {\n                            parameter = 'sname';\n                        }\n                        if (name === 'bypass') {\n                            parameter = 'scond_bypass';\n                        }\n                        form[parameter] = state.val;\n                        await this.deviceEditPost(iddevice, form);\n                    } else if (name === 'hue') {\n                        // Type 74\n                        this.adapter.clearTimeout(this.timerhandle[iddevice]);\n                        this.timerhandle[iddevice] = this.adapter.setTimeout(async () => {\n                            const valuesat = Number((await this.states.getStateAsync(`${idchannel}.sat`))?.val || 0);\n                            await this.deviceHueColorControl(iddevice, {\n                                id: channel,\n                                act: 't_setpoint',\n                                hue: state.val || 0,\n                                saturation: valuesat,\n                                mod: 2,\n                            });\n                        }, execdelay);\n                    } else if (name === 'sat') {\n                        // Type 74\n                        this.adapter.clearTimeout(this.timerhandle[iddevice]);\n                        this.timerhandle[iddevice] = this.adapter.setTimeout(async () => {\n                            const valuehue = Number((await this.states.getStateAsync(`${idchannel}.hue`))?.val || 0);\n                            await this.deviceHueColorControl(iddevice, {\n                                id: channel,\n                                act: 't_setpoint',\n                                hue: valuehue,\n                                saturation: state.val || 0,\n                                mod: 2,\n                            });\n                        }, execdelay);\n                    } else {\n                        this.adapter.log.error(`Found no function to set state to ${state.val} for Id ${iddevice}`);\n                        this.dummyDevicePost(iddevice);\n                    }\n                }\n                if (id.startsWith(`${this.adapter.namespace}.status.`)) {\n                    const regstat = /.+\\.status\\.(.+)/gm;\n                    const m = regstat.exec(id);\n                    if (!m) {\n                        return;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const icchannelabs = id.split('.').slice(0, -1).join('.'); //  lupusec.0.status\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const idchannel = id.split('.').slice(2, -1).join('.'); //  status\n                    const iddevice = id.split('.').slice(2).join('.'); //  status.apple_home_a1\n                    const name = m[1]; // Device ID - apple_home_a1\n                    if (name === 'mode_pc_a1') {\n                        await this.panelCondPost(iddevice, { area: 1, mode: state.val });\n                    } else if (name === 'mode_pc_a2') {\n                        await this.panelCondPost(iddevice, { area: 2, mode: state.val });\n                    } else if (name === 'apple_home_a1') {\n                        const mode_pc_a1 = this.getLupusecFromAppleStautus(Number(state.val));\n                        if (mode_pc_a1 !== undefined && mode_pc_a1 >= 0 && mode_pc_a1 <= 4) {\n                            await this.panelCondPost(iddevice, { area: 1, mode: mode_pc_a1 });\n                        }\n                    } else if (name === 'apple_home_a2') {\n                        const mode_pc_a2 = this.getLupusecFromAppleStautus(Number(state.val));\n                        if (mode_pc_a2 !== undefined && mode_pc_a2 >= 0 && mode_pc_a2 <= 4) {\n                            await this.panelCondPost(iddevice, { area: 2, mode: mode_pc_a2 });\n                        }\n                    } else {\n                        this.adapter.log.error(`Found no function to set state to ${state.val} for Id ${iddevice}`);\n                        this.dummyDevicePost(iddevice);\n                    }\n                }\n                if (id.startsWith(`${this.adapter.namespace}.sms.`)) {\n                    const regstat = /.+\\.sms\\.(.+)/gm;\n                    const m = regstat.exec(id);\n                    if (!m) {\n                        return;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const icchannelabs = id.split('.').slice(0, -1).join('.'); //  lupusec.0.status\n                    const idchannel = id.split('.').slice(2, -1).join('.'); //  status\n                    const iddevice = id.split('.').slice(2).join('.'); //  status.apple_home_a1\n                    const name = m[1]; // Device ID - apple_home_a1\n                    const valText = (await this.states.getStateAsync(`${idchannel}.text`))?.val;\n                    const valNumber = (await this.states.getStateAsync(`${idchannel}.number`))?.val;\n                    const valProvider = (await this.states.getStateAsync(`${idchannel}.provider`))?.val;\n                    let resultsms;\n                    if (name === 'dial') {\n                        if (valText && valNumber) {\n                            switch (valProvider) {\n                                case 1:\n                                    resultsms = await this.sendSMSPost(iddevice, {\n                                        phone: valNumber,\n                                        smstext: valText,\n                                    });\n                                    await this.states.setStateNotExistsAsync(`${idchannel}.result`, {\n                                        val: resultsms?.data?.result,\n                                        ack: true,\n                                    });\n                                    break;\n                                case 2:\n                                    resultsms = await this.sendSMSgwTestPost(iddevice, {\n                                        to: valNumber,\n                                        message: valText,\n                                    });\n                                    await this.states.setStateNotExistsAsync(`${idchannel}.result`, {\n                                        val: resultsms?.data?.result,\n                                        ack: true,\n                                    });\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                    } else {\n                        this.adapter.log.error(`Found no function to set state to ${state.val} for Id ${iddevice}`);\n                        this.dummyDevicePost(iddevice);\n                    }\n                }\n            }\n            if (!state) {\n                // The state was deleted\n                await this.states.delStateAsync(id);\n                this.adapter.log.info(`State ${id} deleted`);\n            }\n        } catch (error: any) {\n            this.adapter.log.error(`Error while setting state: ${error.toString()}`);\n        }\n    }\n\n    /**\n     * Is called if a subscribed object changes\n     *\n     * @param id id of object\n     * @param obj object\n     */\n    public async onObjectChange(id: string, obj: any): Promise<void> {\n        if (obj) {\n            // The object was changed\n            // this.adapter.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n        } else {\n            // The object was deleted\n            await this.states.delObjectAsync(id);\n            this.adapter.log.info(`object ${id} deleted`);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["https", "http", "axios", "querystring", "_a"]
}
