{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["import { promises as dnsPromises } from 'dns';\nimport _ from 'lodash';\nimport * as tcpPing from 'tcp-ping';\n\nexport interface ifHostnamePort {\n    hostname: string;\n    port: number | undefined;\n}\n\nexport class Tools {\n    /**\n     * round(2.74, 0.1) = 2.7\n     * round(2.74, 0.25) = 2.75\n     * round(2.74, 0.5) = 2.5\n     * round(2.74, 1.0) = 3.0\n     * @param value a number like 2.7, 2.75\n     * @param step a number like 0.1, or 2.7\n     * @returns a number\n     */\n    public static round(value: number, step: number): number {\n        step || (step = 1.0);\n        const inv = 1.0 / step;\n        return Math.round(value * inv) / inv;\n    }\n\n    /**\n     * Checking if key exist in object\n     * @param obj {a:1, b:1, c:1}\n     * @param key 'b'\n     * @returns true or false\n     */\n    public static hasProperty(obj: object, key: string): boolean {\n        try {\n            return obj && key in obj ? true : false;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * Wait (sleep) x seconds\n     * @param seconds time in seconds\n     * @returns\n     */\n    public static wait(seconds: number): Promise<void> {\n        return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n    }\n\n    /**\n     *\n     * @param hostname string like www.google.de, test.foo.local:80 or 192.168.20.20:80\n     * @returns the hostname and port.\n     */\n    public static getHostnamePort(hostname: string): ifHostnamePort {\n        const array = hostname.split(':');\n        return {\n            hostname: typeof array[0] !== 'undefined' ? array[0] : '',\n            port: typeof array[1] !== 'undefined' ? Number(array[1]) : undefined,\n        };\n    }\n\n    /**\n     *\n     * @param hostname like www.google.com\n     * @returns\n     */\n    public static async lookup(hostname: string): Promise<string> {\n        const hp = this.getHostnamePort(hostname);\n        const dns = await dnsPromises.lookup(hp.hostname);\n        let address = dns && dns.address ? dns.address : hp.hostname;\n        if (hp.port !== undefined) address = `${address}:${hp.port}`;\n        return address;\n    }\n\n    /**\n     * Checks if server (webserver) is reachable\n     * @param hostname hostname or ip address. For example huhu.foo or 192.168.20.30)\n     * @param portport, for example (80, 8080, ...\n     * @returns\n     */\n    public static async probe(hostname: string, port: number): Promise<boolean> {\n        hostname = await this.lookup(hostname);\n        return new Promise((resolve) => {\n            tcpPing.probe(hostname, port, async (error: any, isAlive: any) => {\n                resolve(isAlive);\n            });\n        });\n    }\n\n    /**\n     * deletes special characteres\n     * @param text : text\n     * @returns text without special characters\n     */\n    public static delSonderzeichen(text: string): string {\n        if (text) {\n            text = text.replace(/\\r/g, '');\n            text = text.replace(/\\n/g, '');\n            text = text.replace(/\\t/g, ' ');\n            text = text.replace(/\\f/g, '');\n        }\n        return text;\n    }\n\n    /**\n     * deletes special characteres in text (must be a stringyfy object) and returns as object if possible\n     * @text text (stringify object)\n     * @returns text if possible\n     */\n    public static JsonParseDelSonderszeichen(text: string): object | string {\n        try {\n            return typeof text === 'string' ? JSON.parse(this.delSonderzeichen(text)) : text;\n        } catch (error) {\n            return text;\n        }\n    }\n\n    /**\n     * checks if two objects equal\n     * @param obj1 object 1\n     * @param obj2  object 2\n     * @returns objects equal, true or false\n     */\n    public static isEqual(obj1: object, obj2: object): boolean {\n        if (typeof obj1 === 'object' && typeof obj2 === 'object') return _.isEqual(obj1, obj2);\n        return obj1 === obj2;\n    }\n\n    /**\n     * if function / method is a async function / method\n     * @param funct function\n     * @returns function is async\n     */\n    public static isAsync(funct: any): boolean {\n        if (funct && funct.constructor) return funct.constructor.name == 'AsyncFunction';\n        return false;\n    }\n\n    /**\n     * Get datatype of value\n     * @param {any} value : value\n     * @returns {string} : datatype of value (object, array, boolean)\n     */\n    public static getPropertyType(value: any): string {\n        let type;\n        switch (Object.prototype.toString.call(value)) {\n            case '[object Object]':\n                type = 'object';\n                break;\n            case '[object Array]':\n                type = 'array';\n                break;\n            case '[object Number]':\n                type = 'number';\n                break;\n            case '[object Boolean]':\n                type = 'boolean';\n                break;\n            case '[object String]':\n                type = 'string';\n                break;\n            default:\n                type = '';\n                break;\n        }\n        return type;\n    }\n\n    /**\n     * Converts the value to given type. Example value to string, number, ...\n     * @param {*} value : any type of value\n     * @param {string} type :   datatype for converting the value\n     * @returns\n     */\n    public static convertPropertyType(value: any, type: string): any {\n        if (value === null || value === undefined) return value;\n        let valuenew = value;\n        switch (type) {\n            case 'number':\n                valuenew = Number(value);\n                break;\n            case 'string':\n                valuenew = value.toString();\n                break;\n            case 'boolean':\n                valuenew = Boolean(Number(value));\n                break;\n            case 'object':\n                valuenew = '{' + value.toString() + '}';\n                break;\n            case 'array':\n                valuenew = '[' + value.toString() + ']';\n                break;\n            default:\n                valuenew = value;\n                break;\n        }\n        return valuenew;\n    }\n\n    public static copyObject(object: any): any {\n        if (object && typeof object === 'object') {\n            return _.cloneDeep(object);\n        } else {\n            return object;\n        }\n    }\n\n    public static mergeObject(object1: any, object2: any): any {\n        return _.merge(object1, object2);\n    }\n\n    /**\n     * gets acutal time\n     */\n    public static getUnixTimestampNow(): number {\n        return Math.ceil(new Date().getTime());\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAwC;AACxC,oBAAc;AACd,cAAyB;AAOlB,MAAM,MAAM;AAAA,EAUf,OAAc,MAAM,OAAe,MAAsB;AACrD,aAAS,OAAO;AAChB,UAAM,MAAM,IAAM;AAClB,WAAO,KAAK,MAAM,QAAQ,GAAG,IAAI;AAAA,EACrC;AAAA,EAQA,OAAc,YAAY,KAAa,KAAsB;AACzD,QAAI;AACA,aAAO,OAAO,OAAO,MAAM,OAAO;AAAA,IACtC,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAOA,OAAc,KAAK,SAAgC;AAC/C,WAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,UAAU,GAAI,CAAC;AAAA,EACvE;AAAA,EAOA,OAAc,gBAAgB,UAAkC;AAC5D,UAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,WAAO;AAAA,MACH,UAAU,OAAO,MAAM,OAAO,cAAc,MAAM,KAAK;AAAA,MACvD,MAAM,OAAO,MAAM,OAAO,cAAc,OAAO,MAAM,EAAE,IAAI;AAAA,IAC/D;AAAA,EACJ;AAAA,EAOA,aAAoB,OAAO,UAAmC;AAC1D,UAAM,KAAK,KAAK,gBAAgB,QAAQ;AACxC,UAAM,MAAM,MAAM,WAAAA,SAAY,OAAO,GAAG,QAAQ;AAChD,QAAI,UAAU,OAAO,IAAI,UAAU,IAAI,UAAU,GAAG;AACpD,QAAI,GAAG,SAAS;AAAW,gBAAU,GAAG,WAAW,GAAG;AACtD,WAAO;AAAA,EACX;AAAA,EAQA,aAAoB,MAAM,UAAkB,MAAgC;AACxE,eAAW,MAAM,KAAK,OAAO,QAAQ;AACrC,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,cAAQ,MAAM,UAAU,MAAM,OAAO,OAAY,YAAiB;AAC9D,gBAAQ,OAAO;AAAA,MACnB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAOA,OAAc,iBAAiB,MAAsB;AACjD,QAAI,MAAM;AACN,aAAO,KAAK,QAAQ,OAAO,EAAE;AAC7B,aAAO,KAAK,QAAQ,OAAO,EAAE;AAC7B,aAAO,KAAK,QAAQ,OAAO,GAAG;AAC9B,aAAO,KAAK,QAAQ,OAAO,EAAE;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA,EAOA,OAAc,2BAA2B,MAA+B;AACpE,QAAI;AACA,aAAO,OAAO,SAAS,WAAW,KAAK,MAAM,KAAK,iBAAiB,IAAI,CAAC,IAAI;AAAA,IAChF,SAAS,OAAP;AACE,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAQA,OAAc,QAAQ,MAAc,MAAuB;AACvD,QAAI,OAAO,SAAS,YAAY,OAAO,SAAS;AAAU,aAAO,cAAAC,QAAE,QAAQ,MAAM,IAAI;AACrF,WAAO,SAAS;AAAA,EACpB;AAAA,EAOA,OAAc,QAAQ,OAAqB;AACvC,QAAI,SAAS,MAAM;AAAa,aAAO,MAAM,YAAY,QAAQ;AACjE,WAAO;AAAA,EACX;AAAA,EAOA,OAAc,gBAAgB,OAAoB;AAC9C,QAAI;AACJ,YAAQ,OAAO,UAAU,SAAS,KAAK,KAAK,GAAG;AAAA,MAC3C,KAAK;AACD,eAAO;AACP;AAAA,MACJ,KAAK;AACD,eAAO;AACP;AAAA,MACJ,KAAK;AACD,eAAO;AACP;AAAA,MACJ,KAAK;AACD,eAAO;AACP;AAAA,MACJ,KAAK;AACD,eAAO;AACP;AAAA,MACJ;AACI,eAAO;AACP;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA,EAQA,OAAc,oBAAoB,OAAY,MAAmB;AAC7D,QAAI,UAAU,QAAQ,UAAU;AAAW,aAAO;AAClD,QAAI,WAAW;AACf,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,mBAAW,OAAO,KAAK;AACvB;AAAA,MACJ,KAAK;AACD,mBAAW,MAAM,SAAS;AAC1B;AAAA,MACJ,KAAK;AACD,mBAAW,QAAQ,OAAO,KAAK,CAAC;AAChC;AAAA,MACJ,KAAK;AACD,mBAAW,MAAM,MAAM,SAAS,IAAI;AACpC;AAAA,MACJ,KAAK;AACD,mBAAW,MAAM,MAAM,SAAS,IAAI;AACpC;AAAA,MACJ;AACI,mBAAW;AACX;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,WAAW,QAAkB;AACvC,QAAI,UAAU,OAAO,WAAW,UAAU;AACtC,aAAO,cAAAA,QAAE,UAAU,MAAM;AAAA,IAC7B,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,OAAc,YAAY,SAAc,SAAmB;AACvD,WAAO,cAAAA,QAAE,MAAM,SAAS,OAAO;AAAA,EACnC;AAAA,EAKA,OAAc,sBAA8B;AACxC,WAAO,KAAK,KAAK,IAAI,KAAK,EAAE,QAAQ,CAAC;AAAA,EACzC;AACJ;",
  "names": ["dnsPromises", "_"]
}
