{
  "version": 3,
  "sources": ["../../src/lib/tools.ts"],
  "sourcesContent": ["import { promises as dnsPromises } from 'dns';\nimport _ from 'lodash';\nimport * as tcpPing from 'tcp-ping';\n\nexport interface ifHostnamePort {\n    hostname: string;\n    port: number | undefined;\n}\n\n/**\n * round(2.74, 0.1) = 2.7\n * round(2.74, 0.25) = 2.75\n * round(2.74, 0.5) = 2.5\n * round(2.74, 1.0) = 3.0\n * @param value a number like 2.7, 2.75\n * @param step a number like 0.1, or 2.7\n * @returns a number\n */\nexport function round(value: number, step: number): number {\n    step || (step = 1.0);\n    const inv = 1.0 / step;\n    return Math.round(value * inv) / inv;\n}\n\n/**\n * Checking if key exist in object\n * @param obj {a:1, b:1, c:1}\n * @param key 'b'\n * @returns true or false\n */\nexport function hasProperty(obj: object, key: string): boolean {\n    try {\n        return obj && key in obj ? true : false;\n    } catch (error) {\n        return false;\n    }\n}\n\n/**\n * Wait (sleep) x seconds\n * @param seconds time in seconds\n * @returns\n */\nexport function wait(seconds: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n}\n\n/**\n *\n * @param hostname string like www.google.de, test.foo.local:80 or 192.168.20.20:80\n * @returns the hostname and port.\n */\nexport function getHostnamePort(hostname: string): ifHostnamePort {\n    const array = hostname.split(':');\n    return {\n        hostname: typeof array[0] !== 'undefined' ? array[0] : '',\n        port: typeof array[1] !== 'undefined' ? Number(array[1]) : undefined,\n    };\n}\n\n/**\n *\n * @param hostname like www.google.com\n * @returns\n */\nexport async function lookup(hostname: string): Promise<string> {\n    const hp = getHostnamePort(hostname);\n    const dns = await dnsPromises.lookup(hp.hostname);\n    let address = dns && dns.address ? dns.address : hp.hostname;\n    if (hp.port !== undefined) address = `${address}:${hp.port}`;\n    return address;\n}\n\n/**\n * Checks if server (webserver) is reachable\n * @param hostname hostname or ip address. For example huhu.foo or 192.168.20.30)\n * @param portport, for example (80, 8080, ...\n * @returns\n */\nexport async function probe(hostname: string, port: number): Promise<boolean> {\n    hostname = await lookup(hostname);\n    return new Promise((resolve) => {\n        tcpPing.probe(hostname, port, async (error: any, isAlive: any) => {\n            resolve(isAlive);\n        });\n    });\n}\n\n/**\n * deletes special characteres\n * @param text : text\n * @returns text without special characters\n */\nexport function delSonderzeichen(text: string): string {\n    if (text) {\n        text = text.replace(/\\r/g, '');\n        text = text.replace(/\\n/g, '');\n        text = text.replace(/\\t/g, ' ');\n        text = text.replace(/\\f/g, '');\n    }\n    return text;\n}\n\n/**\n * deletes special characteres in text (must be a stringyfy object) and returns as object if possible\n * @text text (stringify object)\n * @returns text if possible\n */\nexport function JsonParseDelSonderszeichen(text: string): object | string {\n    try {\n        return typeof text === 'string' ? JSON.parse(delSonderzeichen(text)) : text;\n    } catch (error) {\n        return text;\n    }\n}\n\n/**\n * checks if two objects equal\n * @param obj1 object 1\n * @param obj2  object 2\n * @returns objects equal, true or false\n */\nexport function isEqual(obj1: object, obj2: object): boolean {\n    if (typeof obj1 === 'object' && typeof obj2 === 'object') return _.isEqual(obj1, obj2);\n    return obj1 === obj2;\n}\n\n/**\n * if function / method is a async function / method\n * @param funct function\n * @returns function is async\n */\nexport function isAsync(funct: any): boolean {\n    if (funct && funct.constructor) return funct.constructor.name == 'AsyncFunction';\n    return false;\n}\n\n/**\n * Get datatype of value\n * @param {any} value : value\n * @returns {string} : datatype of value (object, array, boolean)\n */\nexport function getPropertyType(value: any): string {\n    let type;\n    switch (Object.prototype.toString.call(value)) {\n        case '[object Object]':\n            type = 'object';\n            break;\n        case '[object Array]':\n            type = 'array';\n            break;\n        case '[object Number]':\n            type = 'number';\n            break;\n        case '[object Boolean]':\n            type = 'boolean';\n            break;\n        case '[object String]':\n            type = 'string';\n            break;\n        default:\n            type = '';\n            break;\n    }\n    return type;\n}\n\n/**\n * Converts the value to given type. Example value to string, number, ...\n * @param {*} value : any type of value\n * @param {string} type :   datatype for converting the value\n * @returns\n */\nexport function convertPropertyType(value: any, type: string): any {\n    if (value === null || value === undefined) return value;\n    let valuenew = value;\n    switch (type) {\n        case 'number':\n            valuenew = Number(value);\n            break;\n        case 'string':\n            valuenew = value.toString();\n            break;\n        case 'boolean':\n            valuenew = Boolean(Number(value));\n            break;\n        case 'object':\n            valuenew = '{' + value.toString() + '}';\n            break;\n        case 'array':\n            valuenew = '[' + value.toString() + ']';\n            break;\n        default:\n            valuenew = value;\n            break;\n    }\n    return valuenew;\n}\n\nexport function copyObject(object: any): any {\n    if (object && typeof object === 'object') {\n        return _.cloneDeep(object);\n    } else {\n        return object;\n    }\n}\n\nexport function mergeObject(object1: any, object2: any): any {\n    return _.merge(object1, object2);\n}\n\n/**\n * gets acutal time\n */\nexport function getUnixTimestampNow(): number {\n    return Math.ceil(new Date().getTime());\n}\n"],
  "mappings": "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",
  "names": ["dnsPromises", "_"]
}
